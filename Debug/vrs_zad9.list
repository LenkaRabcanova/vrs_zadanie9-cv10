
vrs_zad9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d4c  08002d4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d4c  08002d4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d4c  08002d4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000154  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d39  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ed  00000000  00000000  00027d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000798  00000000  00000000  00029fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001721b  00000000  00000000  0002a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000662f  00000000  00000000  0004197b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079d90  00000000  00000000  00047faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c1d3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002260  00000000  00000000  000c1d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cd8 	.word	0x08002cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002cd8 	.word	0x08002cd8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__NVIC_GetPriorityGrouping+0x18>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	f003 0307 	and.w	r3, r3, #7
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000244:	2b00      	cmp	r3, #0
 8000246:	db0a      	blt.n	800025e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	b2da      	uxtb	r2, r3
 800024c:	490c      	ldr	r1, [pc, #48]	; (8000280 <__NVIC_SetPriority+0x4c>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	0112      	lsls	r2, r2, #4
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	440b      	add	r3, r1
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800025c:	e00a      	b.n	8000274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4908      	ldr	r1, [pc, #32]	; (8000284 <__NVIC_SetPriority+0x50>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	3b04      	subs	r3, #4
 800026c:	0112      	lsls	r2, r2, #4
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	440b      	add	r3, r1
 8000272:	761a      	strb	r2, [r3, #24]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000288:	b480      	push	{r7}
 800028a:	b089      	sub	sp, #36	; 0x24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	f003 0307 	and.w	r3, r3, #7
 800029a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	f1c3 0307 	rsb	r3, r3, #7
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	bf28      	it	cs
 80002a6:	2304      	movcs	r3, #4
 80002a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3304      	adds	r3, #4
 80002ae:	2b06      	cmp	r3, #6
 80002b0:	d902      	bls.n	80002b8 <NVIC_EncodePriority+0x30>
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	3b03      	subs	r3, #3
 80002b6:	e000      	b.n	80002ba <NVIC_EncodePriority+0x32>
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 32ff 	mov.w	r2, #4294967295
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	fa02 f303 	lsl.w	r3, r2, r3
 80002c6:	43da      	mvns	r2, r3
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	401a      	ands	r2, r3
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d0:	f04f 31ff 	mov.w	r1, #4294967295
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43d9      	mvns	r1, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e0:	4313      	orrs	r3, r2
         );
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3724      	adds	r7, #36	; 0x24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fa:	695a      	ldr	r2, [r3, #20]
 80002fc:	4907      	ldr	r1, [pc, #28]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4313      	orrs	r3, r2
 8000302:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4013      	ands	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800030e:	68fb      	ldr	r3, [r7, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ffe3 	bl	80002f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800032a:	f7ff ff57 	bl	80001dc <__NVIC_GetPriorityGrouping>
 800032e:	4603      	mov	r3, r0
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffa7 	bl	8000288 <NVIC_EncodePriority>
 800033a:	4603      	mov	r3, r0
 800033c:	4619      	mov	r1, r3
 800033e:	2010      	movs	r0, #16
 8000340:	f7ff ff78 	bl	8000234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000344:	2010      	movs	r0, #16
 8000346:	f7ff ff57 	bl	80001f8 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800034a:	f7ff ff47 	bl	80001dc <__NVIC_GetPriorityGrouping>
 800034e:	4603      	mov	r3, r0
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff97 	bl	8000288 <NVIC_EncodePriority>
 800035a:	4603      	mov	r3, r0
 800035c:	4619      	mov	r1, r3
 800035e:	2011      	movs	r0, #17
 8000360:	f7ff ff68 	bl	8000234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000364:	2011      	movs	r0, #17
 8000366:	f7ff ff47 	bl	80001f8 <__NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <LL_AHB1_GRP1_EnableClock>:
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800037a:	695a      	ldr	r2, [r3, #20]
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4313      	orrs	r3, r2
 8000382:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4013      	ands	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003a8:	f7ff ffe2 	bl	8000370 <LL_AHB1_GRP1_EnableClock>

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <__NVIC_SetPriorityGrouping>:
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <__NVIC_SetPriorityGrouping+0x44>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003cc:	4013      	ands	r3, r2
 80003ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003e2:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <__NVIC_SetPriorityGrouping+0x44>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60d3      	str	r3, [r2, #12]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <__NVIC_GetPriorityGrouping>:
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <__NVIC_GetPriorityGrouping+0x18>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	f003 0307 	and.w	r3, r3, #7
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <__NVIC_SetPriority>:
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	6039      	str	r1, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db0a      	blt.n	800043e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	490c      	ldr	r1, [pc, #48]	; (8000460 <__NVIC_SetPriority+0x4c>)
 800042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000432:	0112      	lsls	r2, r2, #4
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	440b      	add	r3, r1
 8000438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800043c:	e00a      	b.n	8000454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4908      	ldr	r1, [pc, #32]	; (8000464 <__NVIC_SetPriority+0x50>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	f003 030f 	and.w	r3, r3, #15
 800044a:	3b04      	subs	r3, #4
 800044c:	0112      	lsls	r2, r2, #4
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	440b      	add	r3, r1
 8000452:	761a      	strb	r2, [r3, #24]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	e000e100 	.word	0xe000e100
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <NVIC_EncodePriority>:
{
 8000468:	b480      	push	{r7}
 800046a:	b089      	sub	sp, #36	; 0x24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f003 0307 	and.w	r3, r3, #7
 800047a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	f1c3 0307 	rsb	r3, r3, #7
 8000482:	2b04      	cmp	r3, #4
 8000484:	bf28      	it	cs
 8000486:	2304      	movcs	r3, #4
 8000488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	3304      	adds	r3, #4
 800048e:	2b06      	cmp	r3, #6
 8000490:	d902      	bls.n	8000498 <NVIC_EncodePriority+0x30>
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	3b03      	subs	r3, #3
 8000496:	e000      	b.n	800049a <NVIC_EncodePriority+0x32>
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	f04f 32ff 	mov.w	r2, #4294967295
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	43da      	mvns	r2, r3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	401a      	ands	r2, r3
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b0:	f04f 31ff 	mov.w	r1, #4294967295
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	43d9      	mvns	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c0:	4313      	orrs	r3, r2
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3724      	adds	r7, #36	; 0x24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <LL_RCC_HSI_Enable+0x1c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <LL_RCC_HSI_Enable+0x1c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_HSI_IsReady+0x20>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4904      	ldr	r1, [pc, #16]	; (800053c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800052a:	4313      	orrs	r3, r2
 800052c:	600b      	str	r3, [r1, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetSysClkSource+0x24>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f023 0203 	bic.w	r2, r3, #3
 8000550:	4904      	ldr	r1, [pc, #16]	; (8000564 <LL_RCC_SetSysClkSource+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	604b      	str	r3, [r1, #4]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <LL_RCC_GetSysClkSource+0x18>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f003 030c 	and.w	r3, r3, #12
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	604b      	str	r3, [r1, #4]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005bc:	4904      	ldr	r1, [pc, #16]	; (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	604b      	str	r3, [r1, #4]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005e4:	4904      	ldr	r1, [pc, #16]	; (80005f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <LL_APB1_GRP1_EnableClock+0x2c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4313      	orrs	r3, r2
 800060e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4013      	ands	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000

0800062c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000

0800065c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_FLASH_SetLatency+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f023 0207 	bic.w	r2, r3, #7
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <LL_FLASH_SetLatency+0x24>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	600b      	str	r3, [r1, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40022000 	.word	0x40022000

08000684 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <LL_FLASH_GetLatency+0x18>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0307 	and.w	r3, r3, #7
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f043 0201 	orr.w	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a1a      	ldr	r2, [r3, #32]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	621a      	str	r2, [r3, #32]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f06f 0204 	mvn.w	r2, #4
 80006f0:	611a      	str	r2, [r3, #16]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	2b04      	cmp	r3, #4
 8000710:	d101      	bne.n	8000716 <LL_TIM_IsActiveFlag_CC2+0x18>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f043 0204 	orr.w	r2, r3, #4
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60da      	str	r2, [r3, #12]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ff6f 	bl	800062c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800074e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000752:	f7ff ff53 	bl	80005fc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000756:	2003      	movs	r0, #3
 8000758:	f7ff fe2a 	bl	80003b0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800075c:	f7ff fe4c 	bl	80003f8 <__NVIC_GetPriorityGrouping>
 8000760:	4603      	mov	r3, r0
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fe7e 	bl	8000468 <NVIC_EncodePriority>
 800076c:	4603      	mov	r3, r0
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff fe4e 	bl	8000414 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f820 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f7ff fe10 	bl	80003a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000780:	f7ff fdce 	bl	8000320 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000784:	f001 f8ce 	bl	8001924 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000788:	f000 fc4e 	bl	8001028 <MX_TIM2_Init>
  USART2_RegisterCallback(proccesDmaData);
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x74>)
 800078e:	f001 f8b7 	bl	8001900 <USART2_RegisterCallback>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 8000792:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000796:	f7ff ffc5 	bl	8000724 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 800079a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800079e:	f7ff ff7f 	bl	80006a0 <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setDutyCycle(49);
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80007a2:	2101      	movs	r1, #1
 80007a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007a8:	f7ff ff8a 	bl	80006c0 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 80007ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007b0:	f7ff ff76 	bl	80006a0 <LL_TIM_EnableCounter>

  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x70>
 80007b6:	bf00      	nop
 80007b8:	08000941 	.word	0x08000941

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff4b 	bl	800065c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80007c6:	bf00      	nop
 80007c8:	f7ff ff5c 	bl	8000684 <LL_FLASH_GetLatency>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1fa      	bne.n	80007c8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80007d2:	f7ff fe7d 	bl	80004d0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007d6:	bf00      	nop
 80007d8:	f7ff fe8a 	bl	80004f0 <LL_RCC_HSI_IsReady>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d1fa      	bne.n	80007d8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007e2:	2010      	movs	r0, #16
 80007e4:	f7ff fe96 	bl	8000514 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fecb 	bl	8000584 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fedc 	bl	80005ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff feed 	bl	80005d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fea0 	bl	8000540 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000800:	bf00      	nop
 8000802:	f7ff feb1 	bl	8000568 <LL_RCC_GetSysClkSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1fa      	bne.n	8000802 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <SystemClock_Config+0x60>)
 800080e:	f002 fa07 	bl	8002c20 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000812:	4802      	ldr	r0, [pc, #8]	; (800081c <SystemClock_Config+0x60>)
 8000814:	f002 fa12 	bl	8002c3c <LL_SetSystemCoreClock>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	007a1200 	.word	0x007a1200

08000820 <setDutyCycle>:

/* USER CODE BEGIN 4 */
void setDutyCycle(uint8_t D)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = ((TIM2->ARR) * D) / 100;
 800082a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	4905      	ldr	r1, [pc, #20]	; (8000850 <setDutyCycle+0x30>)
 800083c:	fba1 1303 	umull	r1, r3, r1, r3
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	6353      	str	r3, [r2, #52]	; 0x34

}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	51eb851f 	.word	0x51eb851f

08000854 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_CC2(TIM2))
 8000858:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800085c:	f7ff ff4f 	bl	80006fe <LL_TIM_IsActiveFlag_CC2>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d062      	beq.n	800092c <TIM2_IRQHandler+0xd8>
	{
		if(mode==true)
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <TIM2_IRQHandler+0xdc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d02a      	beq.n	80008c4 <TIM2_IRQHandler+0x70>
		{
			if(change==true)
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <TIM2_IRQHandler+0xe0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <TIM2_IRQHandler+0x2c>
			    truepwm = truepwm  + 1;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <TIM2_IRQHandler+0xe4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <TIM2_IRQHandler+0xe4>)
 800087e:	6013      	str	r3, [r2, #0]
			if(change==false)
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <TIM2_IRQHandler+0xe0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <TIM2_IRQHandler+0x44>
				truepwm = truepwm  - 1;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <TIM2_IRQHandler+0xe4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a28      	ldr	r2, [pc, #160]	; (8000938 <TIM2_IRQHandler+0xe4>)
 8000896:	6013      	str	r3, [r2, #0]

			if(truepwm==pwm)
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <TIM2_IRQHandler+0xe4>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <TIM2_IRQHandler+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d102      	bne.n	80008aa <TIM2_IRQHandler+0x56>
				change=false;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <TIM2_IRQHandler+0xe0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
			if(truepwm==0)
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <TIM2_IRQHandler+0x64>
				change=true;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <TIM2_IRQHandler+0xe0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]

			setDutyCycle(truepwm);
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffae 	bl	8000820 <setDutyCycle>
		}

		if(mode==false)
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <TIM2_IRQHandler+0xdc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	f083 0301 	eor.w	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d028      	beq.n	8000924 <TIM2_IRQHandler+0xd0>
		{
			if(change==true)
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <TIM2_IRQHandler+0xe0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <TIM2_IRQHandler+0x90>
			    truepwm = truepwm  + 1;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	4a15      	ldr	r2, [pc, #84]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008e2:	6013      	str	r3, [r2, #0]
			if(change==false)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <TIM2_IRQHandler+0xe0>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f083 0301 	eor.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <TIM2_IRQHandler+0xa8>
				truepwm = truepwm  - 1;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008fa:	6013      	str	r3, [r2, #0]

			if(truepwm==99)
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <TIM2_IRQHandler+0xe4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b63      	cmp	r3, #99	; 0x63
 8000902:	d102      	bne.n	800090a <TIM2_IRQHandler+0xb6>
				change=false;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <TIM2_IRQHandler+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
			if(truepwm==0)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <TIM2_IRQHandler+0xe4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <TIM2_IRQHandler+0xc4>
				change=true;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <TIM2_IRQHandler+0xe0>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]

			setDutyCycle(truepwm);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <TIM2_IRQHandler+0xe4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7e 	bl	8000820 <setDutyCycle>
		}


		LL_TIM_ClearFlag_CC2(TIM2);
 8000924:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000928:	f7ff fedb 	bl	80006e2 <LL_TIM_ClearFlag_CC2>
	}
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000004 	.word	0x20000004
 8000934:	20000005 	.word	0x20000005
 8000938:	2000002c 	.word	0x2000002c
 800093c:	20000000 	.word	0x20000000

08000940 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	/* Process received data */

		// type your algorithm here:

	 if(sign == '$'){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b24      	cmp	r3, #36	; 0x24
 800094e:	d102      	bne.n	8000956 <proccesDmaData+0x16>
		isListening = true;
 8000950:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <proccesDmaData+0xfc>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
	 }


	if(isListening == true){
 8000956:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <proccesDmaData+0xfc>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01d      	beq.n	800099a <proccesDmaData+0x5a>


		msg[i]=sign;
 800095e:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <proccesDmaData+0x100>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4938      	ldr	r1, [pc, #224]	; (8000a44 <proccesDmaData+0x104>)
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	54ca      	strb	r2, [r1, r3]


		if(!strcmp(msg,"$manual$"))
 8000968:	4937      	ldr	r1, [pc, #220]	; (8000a48 <proccesDmaData+0x108>)
 800096a:	4836      	ldr	r0, [pc, #216]	; (8000a44 <proccesDmaData+0x104>)
 800096c:	f7ff fc2c 	bl	80001c8 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <proccesDmaData+0x3c>
			mode=true;
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <proccesDmaData+0x10c>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]

		if(!strcmp(msg,"$auto$"))
 800097c:	4934      	ldr	r1, [pc, #208]	; (8000a50 <proccesDmaData+0x110>)
 800097e:	4831      	ldr	r0, [pc, #196]	; (8000a44 <proccesDmaData+0x104>)
 8000980:	f7ff fc22 	bl	80001c8 <strcmp>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <proccesDmaData+0x50>
			mode=false;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <proccesDmaData+0x10c>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

		i++;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <proccesDmaData+0x100>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <proccesDmaData+0x100>)
 8000998:	6013      	str	r3, [r2, #0]

	}

	if(i >= 35 || (sign == '$' && i>1 && isListening==true)){
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <proccesDmaData+0x100>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b22      	cmp	r3, #34	; 0x22
 80009a0:	dc0a      	bgt.n	80009b8 <proccesDmaData+0x78>
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b24      	cmp	r3, #36	; 0x24
 80009a6:	d144      	bne.n	8000a32 <proccesDmaData+0xf2>
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <proccesDmaData+0x100>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	dd40      	ble.n	8000a32 <proccesDmaData+0xf2>
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <proccesDmaData+0xfc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d03c      	beq.n	8000a32 <proccesDmaData+0xf2>

		 if(mode==true && !strncmp(msg,"$PWM",4)){
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <proccesDmaData+0x10c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d02d      	beq.n	8000a1c <proccesDmaData+0xdc>
 80009c0:	2204      	movs	r2, #4
 80009c2:	4924      	ldr	r1, [pc, #144]	; (8000a54 <proccesDmaData+0x114>)
 80009c4:	481f      	ldr	r0, [pc, #124]	; (8000a44 <proccesDmaData+0x104>)
 80009c6:	f002 f975 	bl	8002cb4 <strncmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d125      	bne.n	8000a1c <proccesDmaData+0xdc>
			 int first_digit=0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
			 int second_digit=0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]

			 if(msg[4]>='0' && msg[4]<='9')
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <proccesDmaData+0x104>)
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	2b2f      	cmp	r3, #47	; 0x2f
 80009de:	d907      	bls.n	80009f0 <proccesDmaData+0xb0>
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <proccesDmaData+0x104>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	2b39      	cmp	r3, #57	; 0x39
 80009e6:	d803      	bhi.n	80009f0 <proccesDmaData+0xb0>
				 second_digit=msg[4]-'0';
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <proccesDmaData+0x104>)
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	3b30      	subs	r3, #48	; 0x30
 80009ee:	60bb      	str	r3, [r7, #8]

			 if(msg[5]>='0' && msg[5]<='9')
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <proccesDmaData+0x104>)
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	2b2f      	cmp	r3, #47	; 0x2f
 80009f6:	d907      	bls.n	8000a08 <proccesDmaData+0xc8>
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <proccesDmaData+0x104>)
 80009fa:	795b      	ldrb	r3, [r3, #5]
 80009fc:	2b39      	cmp	r3, #57	; 0x39
 80009fe:	d803      	bhi.n	8000a08 <proccesDmaData+0xc8>
				 first_digit=msg[5]-'0';
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <proccesDmaData+0x104>)
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	3b30      	subs	r3, #48	; 0x30
 8000a06:	60fb      	str	r3, [r7, #12]

			 pwm=second_digit*10 + first_digit;
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <proccesDmaData+0x118>)
 8000a1a:	6013      	str	r3, [r2, #0]
		 }

	     isListening = false;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <proccesDmaData+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	     i = 0;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <proccesDmaData+0x100>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
	     memset(msg, 0, 35);
 8000a28:	2223      	movs	r2, #35	; 0x23
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <proccesDmaData+0x104>)
 8000a2e:	f002 f939 	bl	8002ca4 <memset>
	}
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000030 	.word	0x20000030
 8000a40:	20000028 	.word	0x20000028
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	08002cf0 	.word	0x08002cf0
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	08002cfc 	.word	0x08002cfc
 8000a54:	08002d04 	.word	0x08002d04
 8000a58:	20000000 	.word	0x20000000

08000a5c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LL_DMA_DisableChannel+0x3c>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <LL_DMA_DisableChannel+0x3c>)
 8000a7c:	5c8a      	ldrb	r2, [r1, r2]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	440a      	add	r2, r1
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	08002d0c 	.word	0x08002d0c

08000a9c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ad8:	bf0c      	ite	eq
 8000ada:	2301      	moveq	r3, #1
 8000adc:	2300      	movne	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b22:	605a      	str	r2, [r3, #4]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b3e:	605a      	str	r2, [r3, #4]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b5a:	605a      	str	r2, [r3, #4]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d101      	bne.n	8000b80 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	2b40      	cmp	r3, #64	; 0x40
 8000ba0:	d101      	bne.n	8000ba6 <LL_USART_IsActiveFlag_TC+0x18>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <LL_USART_IsActiveFlag_TC+0x1a>
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	621a      	str	r2, [r3, #32]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <BusFault_Handler+0x4>

08000be6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <DMA1_Channel6_IRQHandler+0x38>)
 8000c2a:	f7ff ff37 	bl	8000a9c <LL_DMA_IsActiveFlag_TC6>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000c34:	f000 ff60 	bl	8001af8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <DMA1_Channel6_IRQHandler+0x38>)
 8000c3a:	f7ff ff6b 	bl	8000b14 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c3e:	e00a      	b.n	8000c56 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <DMA1_Channel6_IRQHandler+0x38>)
 8000c42:	f7ff ff53 	bl	8000aec <LL_DMA_IsActiveFlag_HT6>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000c4c:	f000 ff54 	bl	8001af8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <DMA1_Channel6_IRQHandler+0x38>)
 8000c52:	f7ff ff7b 	bl	8000b4c <LL_DMA_ClearFlag_HT6>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020000 	.word	0x40020000

08000c60 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <DMA1_Channel7_IRQHandler+0x30>)
 8000c66:	f7ff ff2d 	bl	8000ac4 <LL_DMA_IsActiveFlag_TC7>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d10d      	bne.n	8000c8c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <DMA1_Channel7_IRQHandler+0x30>)
 8000c72:	f7ff ff5d 	bl	8000b30 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000c76:	bf00      	nop
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <DMA1_Channel7_IRQHandler+0x34>)
 8000c7a:	f7ff ff88 	bl	8000b8e <LL_USART_IsActiveFlag_TC>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f9      	beq.n	8000c78 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000c84:	2107      	movs	r1, #7
 8000c86:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Channel7_IRQHandler+0x30>)
 8000c88:	f7ff fee8 	bl	8000a5c <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40004400 	.word	0x40004400

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <USART2_IRQHandler+0x20>)
 8000c9e:	f7ff ff63 	bl	8000b68 <LL_USART_IsActiveFlag_IDLE>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d004      	beq.n	8000cb2 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000ca8:	f000 ff26 	bl	8001af8 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART2_IRQHandler+0x20>)
 8000cae:	f7ff ff81 	bl	8000bb4 <LL_USART_ClearFlag_IDLE>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <LL_AHB1_GRP1_EnableClock>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_APB1_GRP1_EnableClock>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e2e:	69da      	ldr	r2, [r3, #28]
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_TIM_DisableARRPreload>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_TIM_OC_DisableFast>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d028      	beq.n	8000ed6 <LL_TIM_OC_DisableFast+0x62>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d023      	beq.n	8000ed2 <LL_TIM_OC_DisableFast+0x5e>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d01e      	beq.n	8000ece <LL_TIM_OC_DisableFast+0x5a>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b40      	cmp	r3, #64	; 0x40
 8000e94:	d019      	beq.n	8000eca <LL_TIM_OC_DisableFast+0x56>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9c:	d013      	beq.n	8000ec6 <LL_TIM_OC_DisableFast+0x52>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d00d      	beq.n	8000ec2 <LL_TIM_OC_DisableFast+0x4e>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eac:	d007      	beq.n	8000ebe <LL_TIM_OC_DisableFast+0x4a>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d101      	bne.n	8000eba <LL_TIM_OC_DisableFast+0x46>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00e      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	e00c      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00a      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <LL_TIM_OC_DisableFast+0x64>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3318      	adds	r3, #24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LL_TIM_OC_DisableFast+0x9c>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	440b      	add	r3, r1
 8000ee8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <LL_TIM_OC_DisableFast+0xa0>)
 8000ef2:	5ccb      	ldrb	r3, [r1, r3]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	43db      	mvns	r3, r3
 8000efc:	401a      	ands	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	08002d2c 	.word	0x08002d2c
 8000f14:	08002d38 	.word	0x08002d38

08000f18 <LL_TIM_OC_EnablePreload>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d028      	beq.n	8000f7a <LL_TIM_OC_EnablePreload+0x62>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d023      	beq.n	8000f76 <LL_TIM_OC_EnablePreload+0x5e>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d01e      	beq.n	8000f72 <LL_TIM_OC_EnablePreload+0x5a>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b40      	cmp	r3, #64	; 0x40
 8000f38:	d019      	beq.n	8000f6e <LL_TIM_OC_EnablePreload+0x56>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f40:	d013      	beq.n	8000f6a <LL_TIM_OC_EnablePreload+0x52>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f48:	d00d      	beq.n	8000f66 <LL_TIM_OC_EnablePreload+0x4e>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f50:	d007      	beq.n	8000f62 <LL_TIM_OC_EnablePreload+0x4a>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d101      	bne.n	8000f5e <LL_TIM_OC_EnablePreload+0x46>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00e      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f5e:	2308      	movs	r3, #8
 8000f60:	e00c      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00a      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <LL_TIM_OC_EnablePreload+0x64>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3318      	adds	r3, #24
 8000f82:	4619      	mov	r1, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LL_TIM_OC_EnablePreload+0x98>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	440b      	add	r3, r1
 8000f8c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <LL_TIM_OC_EnablePreload+0x9c>)
 8000f96:	5ccb      	ldrb	r3, [r1, r3]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	08002d2c 	.word	0x08002d2c
 8000fb4:	08002d38 	.word	0x08002d38

08000fb8 <LL_TIM_SetClockSource>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_TIM_SetTriggerOutput>:
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_TIM_DisableMasterSlaveMode>:
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800102e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2220      	movs	r2, #32
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fe2c 	bl	8002ca4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fee1 	bl	8000e24 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001062:	f7ff fe3d 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8001066:	4603      	mov	r3, r0
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe8d 	bl	8000d8c <NVIC_EncodePriority>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	201c      	movs	r0, #28
 8001078:	f7ff fe5e 	bl	8000d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800107c:	201c      	movs	r0, #28
 800107e:	f7ff fe3d 	bl	8000cfc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001082:	f240 331f 	movw	r3, #799	; 0x31f
 8001086:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001088:	2300      	movs	r3, #0
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 800108c:	2363      	movs	r3, #99	; 0x63
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109e:	f001 f95f 	bl	8002360 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80010a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010a6:	f7ff fed5 	bl	8000e54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010aa:	2100      	movs	r1, #0
 80010ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010b0:	f7ff ff82 	bl	8000fb8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80010b4:	2101      	movs	r1, #1
 80010b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010ba:	f7ff ff2d 	bl	8000f18 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	461a      	mov	r2, r3
 80010d8:	2101      	movs	r1, #1
 80010da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010de:	f001 f9b1 	bl	8002444 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80010e2:	2101      	movs	r1, #1
 80010e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e8:	f7ff fec4 	bl	8000e74 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	461a      	mov	r2, r3
 80010f6:	2110      	movs	r1, #16
 80010f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010fc:	f001 f9a2 	bl	8002444 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001100:	2110      	movs	r1, #16
 8001102:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001106:	f7ff feb5 	bl	8000e74 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800110a:	2100      	movs	r1, #0
 800110c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001110:	f7ff ff67 	bl	8000fe2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001114:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001118:	f7ff ff76 	bl	8001008 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800111c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001120:	f7ff fe68 	bl	8000df4 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001124:	2320      	movs	r3, #32
 8001126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001128:	2302      	movs	r3, #2
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 fe64 	bl	8001e10 <LL_GPIO_Init>

}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	; 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <__NVIC_GetPriorityGrouping>:
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <LL_DMA_EnableChannel>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LL_DMA_EnableChannel+0x3c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	3a01      	subs	r2, #1
 8001282:	4907      	ldr	r1, [pc, #28]	; (80012a0 <LL_DMA_EnableChannel+0x3c>)
 8001284:	5c8a      	ldrb	r2, [r1, r2]
 8001286:	4611      	mov	r1, r2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	440a      	add	r2, r1
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	08002d44 	.word	0x08002d44

080012a4 <LL_DMA_DisableChannel>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LL_DMA_DisableChannel+0x3c>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	3a01      	subs	r2, #1
 80012c2:	4907      	ldr	r1, [pc, #28]	; (80012e0 <LL_DMA_DisableChannel+0x3c>)
 80012c4:	5c8a      	ldrb	r2, [r1, r2]
 80012c6:	4611      	mov	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	440a      	add	r2, r1
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	08002d44 	.word	0x08002d44

080012e4 <LL_DMA_SetDataTransferDirection>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LL_DMA_SetDataTransferDirection+0x48>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001304:	f023 0310 	bic.w	r3, r3, #16
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	3a01      	subs	r2, #1
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <LL_DMA_SetDataTransferDirection+0x48>)
 800130e:	5c8a      	ldrb	r2, [r1, r2]
 8001310:	4611      	mov	r1, r2
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	440a      	add	r2, r1
 8001316:	4611      	mov	r1, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	08002d44 	.word	0x08002d44

08001330 <LL_DMA_GetDataTransferDirection>:
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <LL_DMA_GetDataTransferDirection+0x2c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f244 0310 	movw	r3, #16400	; 0x4010
 800134e:	4013      	ands	r3, r2
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	08002d44 	.word	0x08002d44

08001360 <LL_DMA_SetMode>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <LL_DMA_SetMode+0x44>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 0220 	bic.w	r2, r3, #32
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3b01      	subs	r3, #1
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <LL_DMA_SetMode+0x44>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	4619      	mov	r1, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	440b      	add	r3, r1
 800138e:	4619      	mov	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	08002d44 	.word	0x08002d44

080013a8 <LL_DMA_SetPeriphIncMode>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <LL_DMA_SetPeriphIncMode+0x44>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_DMA_SetPeriphIncMode+0x44>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	440b      	add	r3, r1
 80013d6:	4619      	mov	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	08002d44 	.word	0x08002d44

080013f0 <LL_DMA_SetMemoryIncMode>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	3b01      	subs	r3, #1
 8001400:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <LL_DMA_SetMemoryIncMode+0x44>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3b01      	subs	r3, #1
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <LL_DMA_SetMemoryIncMode+0x44>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	4619      	mov	r1, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	440b      	add	r3, r1
 800141e:	4619      	mov	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	08002d44 	.word	0x08002d44

08001438 <LL_DMA_SetPeriphSize>:
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3b01      	subs	r3, #1
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <LL_DMA_SetPeriphSize+0x44>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3b01      	subs	r3, #1
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <LL_DMA_SetPeriphSize+0x44>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	4619      	mov	r1, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	440b      	add	r3, r1
 8001466:	4619      	mov	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	08002d44 	.word	0x08002d44

08001480 <LL_DMA_SetMemorySize>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3b01      	subs	r3, #1
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <LL_DMA_SetMemorySize+0x44>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	461a      	mov	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <LL_DMA_SetMemorySize+0x44>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	4619      	mov	r1, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	440b      	add	r3, r1
 80014ae:	4619      	mov	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	08002d44 	.word	0x08002d44

080014c8 <LL_DMA_SetChannelPriorityLevel>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <LL_DMA_SetChannelPriorityLevel+0x44>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <LL_DMA_SetChannelPriorityLevel+0x44>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	4619      	mov	r1, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	440b      	add	r3, r1
 80014f6:	4619      	mov	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	08002d44 	.word	0x08002d44

08001510 <LL_DMA_SetDataLength>:
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3b01      	subs	r3, #1
 8001520:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <LL_DMA_SetDataLength+0x44>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	461a      	mov	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4413      	add	r3, r2
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	3a01      	subs	r2, #1
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <LL_DMA_SetDataLength+0x44>)
 8001536:	5c8a      	ldrb	r2, [r1, r2]
 8001538:	4611      	mov	r1, r2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	440a      	add	r2, r1
 800153e:	4611      	mov	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	08002d44 	.word	0x08002d44

08001558 <LL_DMA_GetDataLength>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <LL_DMA_GetDataLength+0x28>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	b29b      	uxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	08002d44 	.word	0x08002d44

08001584 <LL_DMA_ConfigAddresses>:
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b10      	cmp	r3, #16
 8001596:	d114      	bne.n	80015c2 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <LL_DMA_ConfigAddresses+0x74>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <LL_DMA_ConfigAddresses+0x74>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	461a      	mov	r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6093      	str	r3, [r2, #8]
}
 80015c0:	e013      	b.n	80015ea <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LL_DMA_ConfigAddresses+0x74>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <LL_DMA_ConfigAddresses+0x74>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	60d3      	str	r3, [r2, #12]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	08002d44 	.word	0x08002d44

080015fc <LL_DMA_SetPeriphAddress>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <LL_DMA_SetPeriphAddress+0x2c>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6093      	str	r3, [r2, #8]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	08002d44 	.word	0x08002d44

0800162c <LL_DMA_IsActiveFlag_TC6>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2db      	uxtb	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LL_DMA_EnableIT_TC+0x3c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	3a01      	subs	r2, #1
 8001672:	4907      	ldr	r1, [pc, #28]	; (8001690 <LL_DMA_EnableIT_TC+0x3c>)
 8001674:	5c8a      	ldrb	r2, [r1, r2]
 8001676:	4611      	mov	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	440a      	add	r2, r1
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	08002d44 	.word	0x08002d44

08001694 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LL_DMA_EnableIT_HT+0x3c>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	3a01      	subs	r2, #1
 80016b2:	4907      	ldr	r1, [pc, #28]	; (80016d0 <LL_DMA_EnableIT_HT+0x3c>)
 80016b4:	5c8a      	ldrb	r2, [r1, r2]
 80016b6:	4611      	mov	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	440a      	add	r2, r1
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	08002d44 	.word	0x08002d44

080016d4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LL_DMA_EnableIT_TE+0x3c>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	3a01      	subs	r2, #1
 80016f2:	4907      	ldr	r1, [pc, #28]	; (8001710 <LL_DMA_EnableIT_TE+0x3c>)
 80016f4:	5c8a      	ldrb	r2, [r1, r2]
 80016f6:	4611      	mov	r1, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	440a      	add	r2, r1
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	08002d44 	.word	0x08002d44

08001714 <LL_AHB1_GRP1_EnableClock>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000

08001744 <LL_APB1_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800174e:	69da      	ldr	r2, [r3, #28]
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4313      	orrs	r3, r2
 8001756:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000

08001774 <LL_USART_Enable>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_USART_ConfigAsyncMode>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	e853 3f00 	ldrex	r3, [r3]
 80017d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	61ba      	str	r2, [r7, #24]
 80017e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017e4:	6979      	ldr	r1, [r7, #20]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	e841 2300 	strex	r3, r2, [r1]
 80017ec:	613b      	str	r3, [r7, #16]
   return(result);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e9      	bne.n	80017c8 <LL_USART_EnableIT_IDLE+0x8>
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001802:	b480      	push	{r7}
 8001804:	b089      	sub	sp, #36	; 0x24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3308      	adds	r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e853 3f00 	ldrex	r3, [r3]
 8001816:	60bb      	str	r3, [r7, #8]
   return(result);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3308      	adds	r3, #8
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	61ba      	str	r2, [r7, #24]
 8001828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	e841 2300 	strex	r3, r2, [r1]
 8001832:	613b      	str	r3, [r7, #16]
   return(result);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e7      	bne.n	800180a <LL_USART_DisableIT_CTS+0x8>
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3308      	adds	r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	e853 3f00 	ldrex	r3, [r3]
 800185c:	60bb      	str	r3, [r7, #8]
   return(result);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3308      	adds	r3, #8
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	61ba      	str	r2, [r7, #24]
 800186e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	e841 2300 	strex	r3, r2, [r1]
 8001878:	613b      	str	r3, [r7, #16]
   return(result);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e7      	bne.n	8001850 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800188e:	b480      	push	{r7}
 8001890:	b089      	sub	sp, #36	; 0x24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	e853 3f00 	ldrex	r3, [r3]
 80018a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3308      	adds	r3, #8
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	61ba      	str	r2, [r7, #24]
 80018b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	e841 2300 	strex	r3, r2, [r1]
 80018be:	613b      	str	r3, [r7, #16]
   return(result);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e7      	bne.n	8001896 <LL_USART_EnableDMAReq_TX+0x8>
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	3724      	adds	r7, #36	; 0x24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3328      	adds	r3, #40	; 0x28
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e002      	b.n	80018f2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3324      	adds	r3, #36	; 0x24
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t sign) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <USART2_RegisterCallback+0x20>)
 8001912:	6013      	str	r3, [r2, #0]
	}
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	20000034 	.word	0x20000034

08001924 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b090      	sub	sp, #64	; 0x40
 8001928:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800194e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001952:	f7ff fef7 	bl	8001744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001956:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800195a:	f7ff fedb 	bl	8001714 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800195e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001964:	2302      	movs	r3, #2
 8001966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001974:	2307      	movs	r3, #7
 8001976:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f000 fa46 	bl	8001e10 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001984:	2200      	movs	r2, #0
 8001986:	2106      	movs	r1, #6
 8001988:	4858      	ldr	r0, [pc, #352]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 800198a:	f7ff fcab 	bl	80012e4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800198e:	2200      	movs	r2, #0
 8001990:	2106      	movs	r1, #6
 8001992:	4856      	ldr	r0, [pc, #344]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001994:	f7ff fd98 	bl	80014c8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001998:	2200      	movs	r2, #0
 800199a:	2106      	movs	r1, #6
 800199c:	4853      	ldr	r0, [pc, #332]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 800199e:	f7ff fcdf 	bl	8001360 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2106      	movs	r1, #6
 80019a6:	4851      	ldr	r0, [pc, #324]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019a8:	f7ff fcfe 	bl	80013a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	2106      	movs	r1, #6
 80019b0:	484e      	ldr	r0, [pc, #312]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019b2:	f7ff fd1d 	bl	80013f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2106      	movs	r1, #6
 80019ba:	484c      	ldr	r0, [pc, #304]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019bc:	f7ff fd3c 	bl	8001438 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2106      	movs	r1, #6
 80019c4:	4849      	ldr	r0, [pc, #292]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019c6:	f7ff fd5b 	bl	8001480 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80019ca:	2101      	movs	r1, #1
 80019cc:	4848      	ldr	r0, [pc, #288]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 80019ce:	f7ff ff81 	bl	80018d4 <LL_USART_DMA_GetRegAddr>
 80019d2:	4604      	mov	r4, r0
 80019d4:	4d47      	ldr	r5, [pc, #284]	; (8001af4 <MX_USART2_UART_Init+0x1d0>)
 80019d6:	2106      	movs	r1, #6
 80019d8:	4844      	ldr	r0, [pc, #272]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019da:	f7ff fca9 	bl	8001330 <LL_DMA_GetDataTransferDirection>
 80019de:	4603      	mov	r3, r0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	462b      	mov	r3, r5
 80019e4:	4622      	mov	r2, r4
 80019e6:	2106      	movs	r1, #6
 80019e8:	4840      	ldr	r0, [pc, #256]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019ea:	f7ff fdcb 	bl	8001584 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80019ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f2:	2106      	movs	r1, #6
 80019f4:	483d      	ldr	r0, [pc, #244]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019f6:	f7ff fd8b 	bl	8001510 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80019fa:	2106      	movs	r1, #6
 80019fc:	483b      	ldr	r0, [pc, #236]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 80019fe:	f7ff fc31 	bl	8001264 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001a02:	483b      	ldr	r0, [pc, #236]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001a04:	f7ff ff20 	bl	8001848 <LL_USART_EnableDMAReq_RX>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001a08:	2106      	movs	r1, #6
 8001a0a:	4838      	ldr	r0, [pc, #224]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a0c:	f7ff fe22 	bl	8001654 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001a10:	2106      	movs	r1, #6
 8001a12:	4836      	ldr	r0, [pc, #216]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a14:	f7ff fe3e 	bl	8001694 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001a18:	2210      	movs	r2, #16
 8001a1a:	2107      	movs	r1, #7
 8001a1c:	4833      	ldr	r0, [pc, #204]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a1e:	f7ff fc61 	bl	80012e4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2107      	movs	r1, #7
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a28:	f7ff fd4e 	bl	80014c8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2107      	movs	r1, #7
 8001a30:	482e      	ldr	r0, [pc, #184]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a32:	f7ff fc95 	bl	8001360 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2107      	movs	r1, #7
 8001a3a:	482c      	ldr	r0, [pc, #176]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a3c:	f7ff fcb4 	bl	80013a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	2107      	movs	r1, #7
 8001a44:	4829      	ldr	r0, [pc, #164]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a46:	f7ff fcd3 	bl	80013f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	4827      	ldr	r0, [pc, #156]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a50:	f7ff fcf2 	bl	8001438 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2107      	movs	r1, #7
 8001a58:	4824      	ldr	r0, [pc, #144]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a5a:	f7ff fd11 	bl	8001480 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4823      	ldr	r0, [pc, #140]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001a62:	f7ff ff37 	bl	80018d4 <LL_USART_DMA_GetRegAddr>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	481f      	ldr	r0, [pc, #124]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a6e:	f7ff fdc5 	bl	80015fc <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001a72:	481f      	ldr	r0, [pc, #124]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001a74:	f7ff ff0b 	bl	800188e <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001a78:	2107      	movs	r1, #7
 8001a7a:	481c      	ldr	r0, [pc, #112]	; (8001aec <MX_USART2_UART_Init+0x1c8>)
 8001a7c:	f7ff fe2a 	bl	80016d4 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a80:	f7ff fb66 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fbb6 	bl	80011fc <NVIC_EncodePriority>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	2026      	movs	r0, #38	; 0x26
 8001a96:	f7ff fb87 	bl	80011a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001a9a:	2026      	movs	r0, #38	; 0x26
 8001a9c:	f7ff fb66 	bl	800116c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8001aa0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001aa4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480a      	ldr	r0, [pc, #40]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001ac6:	f001 f825 	bl	8002b14 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001acc:	f7ff fe99 	bl	8001802 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001ad2:	f7ff fe5f 	bl	8001794 <LL_USART_ConfigAsyncMode>
  /* USER CODE BEGIN USART2_Init 2 */
  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001ad8:	f7ff fe72 	bl	80017c0 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_USART2_UART_Init+0x1cc>)
 8001ade:	f7ff fe49 	bl	8001774 <LL_USART_Enable>
  /* USER CODE END USART2_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3738      	adds	r7, #56	; 0x38
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40004400 	.word	0x40004400
 8001af4:	20000060 	.word	0x20000060

08001af8 <USART2_CheckDmaReception>:
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
}
void USART2_CheckDmaReception(void)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <USART2_CheckDmaReception+0xa8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d048      	beq.n	8001b98 <USART2_CheckDmaReception+0xa0>


		for(int i=old_pos; i<(DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6)); i++){
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <USART2_CheckDmaReception+0xac>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e010      	b.n	8001b30 <USART2_CheckDmaReception+0x38>

		USART2_ProcessData(bufferUSART2dma[i]);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <USART2_CheckDmaReception+0xa8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4925      	ldr	r1, [pc, #148]	; (8001ba8 <USART2_CheckDmaReception+0xb0>)
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	440a      	add	r2, r1
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4798      	blx	r3
		old_pos=i+1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <USART2_CheckDmaReception+0xac>)
 8001b28:	801a      	strh	r2, [r3, #0]
		for(int i=old_pos; i<(DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6)); i++){
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	2106      	movs	r1, #6
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b34:	f7ff fd10 	bl	8001558 <LL_DMA_GetDataLength>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8e4      	bhi.n	8001b0e <USART2_CheckDmaReception+0x16>

		}

		if(LL_DMA_IsActiveFlag_TC6(DMA1)) {
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b46:	f7ff fd71 	bl	800162c <LL_DMA_IsActiveFlag_TC6>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d024      	beq.n	8001b9a <USART2_CheckDmaReception+0xa2>
		    old_pos = 0;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <USART2_CheckDmaReception+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]

			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001b56:	2106      	movs	r1, #6
 8001b58:	4814      	ldr	r0, [pc, #80]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b5a:	f7ff fba3 	bl	80012a4 <LL_DMA_DisableChannel>

			LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <USART2_CheckDmaReception+0xb8>)
 8001b62:	f7ff feb7 	bl	80018d4 <LL_USART_DMA_GetRegAddr>
 8001b66:	4604      	mov	r4, r0
 8001b68:	4d0f      	ldr	r5, [pc, #60]	; (8001ba8 <USART2_CheckDmaReception+0xb0>)
 8001b6a:	2106      	movs	r1, #6
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b6e:	f7ff fbdf 	bl	8001330 <LL_DMA_GetDataTransferDirection>
 8001b72:	4603      	mov	r3, r0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	462b      	mov	r3, r5
 8001b78:	4622      	mov	r2, r4
 8001b7a:	2106      	movs	r1, #6
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b7e:	f7ff fd01 	bl	8001584 <LL_DMA_ConfigAddresses>
		    LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),	(uint32_t)bufferUSART2dma,LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
		    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	2106      	movs	r1, #6
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b8a:	f7ff fcc1 	bl	8001510 <LL_DMA_SetDataLength>
		    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001b8e:	2106      	movs	r1, #6
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <USART2_CheckDmaReception+0xb4>)
 8001b92:	f7ff fb67 	bl	8001264 <LL_DMA_EnableChannel>
 8001b96:	e000      	b.n	8001b9a <USART2_CheckDmaReception+0xa2>
	if(USART2_ProcessData == 0) return;
 8001b98:	bf00      	nop

		}


}
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba0:	20000034 	.word	0x20000034
 8001ba4:	20000038 	.word	0x20000038
 8001ba8:	20000060 	.word	0x20000060
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0b      	ldr	r4, [pc, #44]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff f86d 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f001 f83b 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe fdad 	bl	8000744 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bf8:	08002d54 	.word	0x08002d54
  ldr r2, =_sbss
 8001bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c00:	20000160 	.word	0x20000160

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>

08001c06 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b089      	sub	sp, #36	; 0x24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	613b      	str	r3, [r7, #16]
  return result;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	401a      	ands	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	61bb      	str	r3, [r7, #24]
  return result;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	3724      	adds	r7, #36	; 0x24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	431a      	orrs	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	613b      	str	r3, [r7, #16]
  return result;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2103      	movs	r1, #3
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	61bb      	str	r3, [r7, #24]
  return result;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b089      	sub	sp, #36	; 0x24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	613b      	str	r3, [r7, #16]
  return result;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2103      	movs	r1, #3
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	60da      	str	r2, [r3, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	613b      	str	r3, [r7, #16]
  return result;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	210f      	movs	r1, #15
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b089      	sub	sp, #36	; 0x24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	613b      	str	r3, [r7, #16]
  return result;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	61bb      	str	r3, [r7, #24]
  return result;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001e04:	bf00      	nop
 8001e06:	3724      	adds	r7, #36	; 0x24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	613b      	str	r3, [r7, #16]
  return result;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e32:	e051      	b.n	8001ed8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d043      	beq.n	8001ed2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d003      	beq.n	8001e5a <LL_GPIO_Init+0x4a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d10e      	bne.n	8001e78 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ff16 	bl	8001c94 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fef6 	bl	8001c64 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	69b9      	ldr	r1, [r7, #24]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff36 	bl	8001cf2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d11a      	bne.n	8001ec4 <LL_GPIO_Init+0xb4>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	60bb      	str	r3, [r7, #8]
  return result;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d807      	bhi.n	8001eb6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff4e 	bl	8001d50 <LL_GPIO_SetAFPin_0_7>
 8001eb4:	e006      	b.n	8001ec4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff75 	bl	8001dae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fe9a 	bl	8001c06 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1a6      	bne.n	8001e34 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <LL_RCC_HSI_IsReady>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <LL_RCC_HSI_IsReady+0x20>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000

08001f14 <LL_RCC_LSE_IsReady>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <LL_RCC_LSE_IsReady+0x20>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000

08001f38 <LL_RCC_GetSysClkSource>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <LL_RCC_GetSysClkSource+0x18>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <LL_RCC_GetAHBPrescaler+0x18>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000

08001f8c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <LL_RCC_GetUSARTClockSource+0x28>)
 8001fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	4313      	orrs	r3, r2
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <LL_RCC_PLL_GetMainSource+0x18>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <LL_RCC_PLL_GetPrediv+0x18>)
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f003 030f 	and.w	r3, r3, #15
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002030:	f000 f864 	bl	80020fc <RCC_GetSystemClockFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f882 	bl	8002148 <RCC_GetHCLKClockFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f890 	bl	8002174 <RCC_GetPCLK1ClockFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f89c 	bl	800219c <RCC_GetPCLK2ClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12d      	bne.n	80020e2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ff8e 	bl	8001fa8 <LL_RCC_GetUSARTClockSource>
 800208c:	4603      	mov	r3, r0
 800208e:	2b03      	cmp	r3, #3
 8002090:	d00a      	beq.n	80020a8 <LL_RCC_GetUSARTClockFreq+0x34>
 8002092:	2b03      	cmp	r3, #3
 8002094:	d819      	bhi.n	80020ca <LL_RCC_GetUSARTClockFreq+0x56>
 8002096:	2b01      	cmp	r3, #1
 8002098:	d002      	beq.n	80020a0 <LL_RCC_GetUSARTClockFreq+0x2c>
 800209a:	2b02      	cmp	r3, #2
 800209c:	d00c      	beq.n	80020b8 <LL_RCC_GetUSARTClockFreq+0x44>
 800209e:	e014      	b.n	80020ca <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80020a0:	f000 f82c 	bl	80020fc <RCC_GetSystemClockFreq>
 80020a4:	60f8      	str	r0, [r7, #12]
        break;
 80020a6:	e021      	b.n	80020ec <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80020a8:	f7ff ff22 	bl	8001ef0 <LL_RCC_HSI_IsReady>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <LL_RCC_GetUSARTClockFreq+0x84>)
 80020b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020b6:	e016      	b.n	80020e6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80020b8:	f7ff ff2c 	bl	8001f14 <LL_RCC_LSE_IsReady>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80020c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020c8:	e00f      	b.n	80020ea <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80020ca:	f000 f817 	bl	80020fc <RCC_GetSystemClockFreq>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f839 	bl	8002148 <RCC_GetHCLKClockFreq>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f84b 	bl	8002174 <RCC_GetPCLK1ClockFreq>
 80020de:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80020e0:	e004      	b.n	80020ec <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80020e2:	bf00      	nop
 80020e4:	e002      	b.n	80020ec <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80020ea:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	007a1200 	.word	0x007a1200

080020fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002106:	f7ff ff17 	bl	8001f38 <LL_RCC_GetSysClkSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b08      	cmp	r3, #8
 800210e:	d00c      	beq.n	800212a <RCC_GetSystemClockFreq+0x2e>
 8002110:	2b08      	cmp	r3, #8
 8002112:	d80e      	bhi.n	8002132 <RCC_GetSystemClockFreq+0x36>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <RCC_GetSystemClockFreq+0x22>
 8002118:	2b04      	cmp	r3, #4
 800211a:	d003      	beq.n	8002124 <RCC_GetSystemClockFreq+0x28>
 800211c:	e009      	b.n	8002132 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <RCC_GetSystemClockFreq+0x48>)
 8002120:	607b      	str	r3, [r7, #4]
      break;
 8002122:	e009      	b.n	8002138 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <RCC_GetSystemClockFreq+0x48>)
 8002126:	607b      	str	r3, [r7, #4]
      break;
 8002128:	e006      	b.n	8002138 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800212a:	f000 f84b 	bl	80021c4 <RCC_PLL_GetFreqDomain_SYS>
 800212e:	6078      	str	r0, [r7, #4]
      break;
 8002130:	e002      	b.n	8002138 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <RCC_GetSystemClockFreq+0x48>)
 8002134:	607b      	str	r3, [r7, #4]
      break;
 8002136:	bf00      	nop
  }

  return frequency;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	007a1200 	.word	0x007a1200

08002148 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002150:	f7ff ff00 	bl	8001f54 <LL_RCC_GetAHBPrescaler>
 8002154:	4603      	mov	r3, r0
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <RCC_GetHCLKClockFreq+0x28>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	40d3      	lsrs	r3, r2
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	08002d14 	.word	0x08002d14

08002174 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800217c:	f7ff fef8 	bl	8001f70 <LL_RCC_GetAPB1Prescaler>
 8002180:	4603      	mov	r3, r0
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <RCC_GetPCLK1ClockFreq+0x24>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	40d3      	lsrs	r3, r2
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	08002d24 	.word	0x08002d24

0800219c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80021a4:	f7ff fef2 	bl	8001f8c <LL_RCC_GetAPB2Prescaler>
 80021a8:	4603      	mov	r3, r0
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <RCC_GetPCLK2ClockFreq+0x24>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	40d3      	lsrs	r3, r2
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08002d24 	.word	0x08002d24

080021c4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021d2:	f7ff feff 	bl	8001fd4 <LL_RCC_PLL_GetMainSource>
 80021d6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d003      	beq.n	80021ee <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80021e6:	e005      	b.n	80021f4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80021ea:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80021ec:	e005      	b.n	80021fa <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80021f0:	60fb      	str	r3, [r7, #12]
      break;
 80021f2:	e002      	b.n	80021fa <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80021f6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80021f8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80021fa:	f7ff ff07 	bl	800200c <LL_RCC_PLL_GetPrediv>
 80021fe:	4603      	mov	r3, r0
 8002200:	3301      	adds	r3, #1
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	fbb2 f4f3 	udiv	r4, r2, r3
 8002208:	f7ff fef2 	bl	8001ff0 <LL_RCC_PLL_GetMultiplicator>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002212:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002216:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	fa92 f2a2 	rbit	r2, r2
 800221e:	603a      	str	r2, [r7, #0]
  return result;
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	fab2 f282 	clz	r2, r2
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	40d3      	lsrs	r3, r2
 800222a:	3302      	adds	r3, #2
 800222c:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	003d0900 	.word	0x003d0900
 800223c:	007a1200 	.word	0x007a1200

08002240 <LL_TIM_SetPrescaler>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_TIM_SetAutoReload>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_TIM_SetRepetitionCounter>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_TIM_OC_SetCompareCH1>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_TIM_OC_SetCompareCH2>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_TIM_OC_SetCompareCH3>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_TIM_OC_SetCompareCH4>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_TIM_OC_SetCompareCH5>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_TIM_OC_SetCompareCH6>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	615a      	str	r2, [r3, #20]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a2f      	ldr	r2, [pc, #188]	; (8002430 <LL_TIM_Init+0xd0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <LL_TIM_Init+0x28>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d003      	beq.n	8002388 <LL_TIM_Init+0x28>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <LL_TIM_Init+0xd4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d106      	bne.n	8002396 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <LL_TIM_Init+0xd0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <LL_TIM_Init+0x66>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d00f      	beq.n	80023c6 <LL_TIM_Init+0x66>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a22      	ldr	r2, [pc, #136]	; (8002434 <LL_TIM_Init+0xd4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <LL_TIM_Init+0x66>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <LL_TIM_Init+0xd8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <LL_TIM_Init+0x66>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <LL_TIM_Init+0xdc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <LL_TIM_Init+0x66>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <LL_TIM_Init+0xe0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d106      	bne.n	80023d4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff3b 	bl	800225c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff27 	bl	8002240 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <LL_TIM_Init+0xd0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <LL_TIM_Init+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LL_TIM_Init+0xd8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <LL_TIM_Init+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <LL_TIM_Init+0xdc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <LL_TIM_Init+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <LL_TIM_Init+0xe0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d105      	bne.n	800241e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff2d 	bl	8002278 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ff8e 	bl	8002340 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40014000 	.word	0x40014000
 800243c:	40014400 	.word	0x40014400
 8002440:	40014800 	.word	0x40014800

08002444 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245a:	d045      	beq.n	80024e8 <LL_TIM_OC_Init+0xa4>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002462:	d848      	bhi.n	80024f6 <LL_TIM_OC_Init+0xb2>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246a:	d036      	beq.n	80024da <LL_TIM_OC_Init+0x96>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d840      	bhi.n	80024f6 <LL_TIM_OC_Init+0xb2>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	d027      	beq.n	80024cc <LL_TIM_OC_Init+0x88>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d838      	bhi.n	80024f6 <LL_TIM_OC_Init+0xb2>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	d018      	beq.n	80024be <LL_TIM_OC_Init+0x7a>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d830      	bhi.n	80024f6 <LL_TIM_OC_Init+0xb2>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d003      	beq.n	80024a2 <LL_TIM_OC_Init+0x5e>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b10      	cmp	r3, #16
 800249e:	d007      	beq.n	80024b0 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80024a0:	e029      	b.n	80024f6 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f82d 	bl	8002504 <OC1Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]
      break;
 80024ae:	e023      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f8a0 	bl	80025f8 <OC2Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]
      break;
 80024bc:	e01c      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f917 	bl	80026f4 <OC3Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
      break;
 80024ca:	e015      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f98e 	bl	80027f0 <OC4Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	75fb      	strb	r3, [r7, #23]
      break;
 80024d8:	e00e      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9ed 	bl	80028bc <OC5Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]
      break;
 80024e6:	e007      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa44 	bl	8002978 <OC6Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]
      break;
 80024f4:	e000      	b.n	80024f8 <LL_TIM_OC_Init+0xb4>
      break;
 80024f6:	bf00      	nop
  }

  return result;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0201 	bic.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 0202 	bic.w	r2, r3, #2
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <OC1Config+0xe4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <OC1Config+0x7e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <OC1Config+0xe8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <OC1Config+0x7e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <OC1Config+0xec>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <OC1Config+0x7e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <OC1Config+0xf0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11e      	bne.n	80025c0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f023 0208 	bic.w	r2, r3, #8
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f023 0204 	bic.w	r2, r3, #4
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fe5e 	bl	8002294 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800

080025f8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0210 	bic.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0220 	bic.w	r2, r3, #32
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0210 	bic.w	r2, r3, #16
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <OC2Config+0xec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <OC2Config+0x84>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <OC2Config+0xf0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <OC2Config+0x84>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <OC2Config+0xf4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <OC2Config+0x84>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <OC2Config+0xf8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d11f      	bne.n	80026bc <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	019b      	lsls	r3, r3, #6
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fdee 	bl	80022b0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40014800 	.word	0x40014800

080026f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <OC3Config+0xec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <OC3Config+0x82>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <OC3Config+0xf0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <OC3Config+0x82>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <OC3Config+0xf4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <OC3Config+0x82>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <OC3Config+0xf8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d11f      	bne.n	80027b6 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	029b      	lsls	r3, r3, #10
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	015b      	lsls	r3, r3, #5
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fd7f 	bl	80022cc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800

080027f0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	0212      	lsls	r2, r2, #8
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	031b      	lsls	r3, r3, #12
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <OC4Config+0xbc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <OC4Config+0x84>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <OC4Config+0xc0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <OC4Config+0x84>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <OC4Config+0xc4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <OC4Config+0x84>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <OC4Config+0xc8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d107      	bne.n	8002884 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	019b      	lsls	r3, r3, #6
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fd26 	bl	80022e8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800

080028bc <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <OC5Config+0xac>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <OC5Config+0x74>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <OC5Config+0xb0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <OC5Config+0x74>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <OC5Config+0xb4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <OC5Config+0x74>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <OC5Config+0xb8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fcd7 	bl	8002304 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	0212      	lsls	r2, r2, #8
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	051b      	lsls	r3, r3, #20
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <OC6Config+0xac>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00b      	beq.n	80029ee <OC6Config+0x76>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <OC6Config+0xb0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <OC6Config+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <OC6Config+0xb4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <OC6Config+0x76>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <OC6Config+0xb8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d109      	bne.n	8002a02 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fc88 	bl	8002324 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800

08002a34 <LL_USART_IsEnabled>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <LL_USART_IsEnabled+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_USART_IsEnabled+0x1a>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_USART_SetStopBitsLength>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_USART_SetHWFlowCtrl>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_USART_SetBaudRate>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aba:	d11a      	bne.n	8002af2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	005a      	lsls	r2, r3, #1
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	441a      	add	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	e00a      	b.n	8002b08 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	085a      	lsrs	r2, r3, #1
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	441a      	add	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ff84 	bl	8002a34 <LL_USART_IsEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14e      	bne.n	8002bd0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <LL_USART_Init+0xc8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6851      	ldr	r1, [r2, #4]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	4311      	orrs	r1, r2
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	6912      	ldr	r2, [r2, #16]
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6992      	ldr	r2, [r2, #24]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff7c 	bl	8002a5a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff89 	bl	8002a80 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <LL_USART_Init+0xcc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d104      	bne.n	8002b80 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7ff fa7c 	bl	8002074 <LL_RCC_GetUSARTClockFreq>
 8002b7c:	61b8      	str	r0, [r7, #24]
 8002b7e:	e016      	b.n	8002bae <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <LL_USART_Init+0xd0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d107      	bne.n	8002b98 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fa4b 	bl	8002028 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e00a      	b.n	8002bae <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <LL_USART_Init+0xd4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d106      	bne.n	8002bae <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fa3f 	bl	8002028 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ff6b 	bl	8002aa6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	efff69f3 	.word	0xefff69f3
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800

08002bec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <LL_InitTick+0x30>)
 8002c00:	3b01      	subs	r3, #1
 8002c02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <LL_InitTick+0x30>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <LL_InitTick+0x30>)
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffdd 	bl	8002bec <LL_InitTick>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <LL_SetSystemCoreClock+0x1c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000008 	.word	0x20000008

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d0d      	ldr	r5, [pc, #52]	; (8002c94 <__libc_init_array+0x38>)
 8002c60:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	2600      	movs	r6, #0
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	4d0b      	ldr	r5, [pc, #44]	; (8002c9c <__libc_init_array+0x40>)
 8002c6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ca0 <__libc_init_array+0x44>)
 8002c70:	f000 f832 	bl	8002cd8 <_init>
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	2600      	movs	r6, #0
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002d4c 	.word	0x08002d4c
 8002c98:	08002d4c 	.word	0x08002d4c
 8002c9c:	08002d4c 	.word	0x08002d4c
 8002ca0:	08002d50 	.word	0x08002d50

08002ca4 <memset>:
 8002ca4:	4402      	add	r2, r0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d100      	bne.n	8002cae <memset+0xa>
 8002cac:	4770      	bx	lr
 8002cae:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb2:	e7f9      	b.n	8002ca8 <memset+0x4>

08002cb4 <strncmp>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	b16a      	cbz	r2, 8002cd4 <strncmp+0x20>
 8002cb8:	3901      	subs	r1, #1
 8002cba:	1884      	adds	r4, r0, r2
 8002cbc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002cc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <strncmp+0x1c>
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d001      	beq.n	8002cd0 <strncmp+0x1c>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f5      	bne.n	8002cbc <strncmp+0x8>
 8002cd0:	1a98      	subs	r0, r3, r2
 8002cd2:	bd10      	pop	{r4, pc}
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	e7fc      	b.n	8002cd2 <strncmp+0x1e>

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
