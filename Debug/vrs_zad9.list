
vrs_zad9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080028b8  080028b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b8  080028b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000012c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a7f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ed  00000000  00000000  00027ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001721b  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006443  00000000  00000000  00041643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079ce1  00000000  00000000  00047a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c1767  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020f8  00000000  00000000  000c17bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002860 	.word	0x08002860

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002860 	.word	0x08002860

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000336:	f7ff ff47 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800033a:	4603      	mov	r3, r0
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff97 	bl	8000274 <NVIC_EncodePriority>
 8000346:	4603      	mov	r3, r0
 8000348:	4619      	mov	r1, r3
 800034a:	2011      	movs	r0, #17
 800034c:	f7ff ff68 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000350:	2011      	movs	r0, #17
 8000352:	f7ff ff47 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <LL_AHB1_GRP1_EnableClock>:
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037a:	68fb      	ldr	r3, [r7, #12]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000390:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000394:	f7ff ffe2 	bl	800035c <LL_AHB1_GRP1_EnableClock>

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <__NVIC_SetPriorityGrouping>:
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <__NVIC_SetPriorityGrouping+0x44>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003b8:	4013      	ands	r3, r2
 80003ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <__NVIC_SetPriorityGrouping+0x44>)
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	60d3      	str	r3, [r2, #12]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <__NVIC_GetPriorityGrouping>:
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <__NVIC_GetPriorityGrouping+0x18>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	f003 0307 	and.w	r3, r3, #7
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <__NVIC_SetPriority>:
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800040c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	db0a      	blt.n	800042a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	490c      	ldr	r1, [pc, #48]	; (800044c <__NVIC_SetPriority+0x4c>)
 800041a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041e:	0112      	lsls	r2, r2, #4
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	440b      	add	r3, r1
 8000424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000428:	e00a      	b.n	8000440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4908      	ldr	r1, [pc, #32]	; (8000450 <__NVIC_SetPriority+0x50>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	f003 030f 	and.w	r3, r3, #15
 8000436:	3b04      	subs	r3, #4
 8000438:	0112      	lsls	r2, r2, #4
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	440b      	add	r3, r1
 800043e:	761a      	strb	r2, [r3, #24]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000e100 	.word	0xe000e100
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <NVIC_EncodePriority>:
{
 8000454:	b480      	push	{r7}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f003 0307 	and.w	r3, r3, #7
 8000466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000468:	69fb      	ldr	r3, [r7, #28]
 800046a:	f1c3 0307 	rsb	r3, r3, #7
 800046e:	2b04      	cmp	r3, #4
 8000470:	bf28      	it	cs
 8000472:	2304      	movcs	r3, #4
 8000474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	3304      	adds	r3, #4
 800047a:	2b06      	cmp	r3, #6
 800047c:	d902      	bls.n	8000484 <NVIC_EncodePriority+0x30>
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	3b03      	subs	r3, #3
 8000482:	e000      	b.n	8000486 <NVIC_EncodePriority+0x32>
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	f04f 32ff 	mov.w	r2, #4294967295
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	43da      	mvns	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	401a      	ands	r2, r3
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800049c:	f04f 31ff 	mov.w	r1, #4294967295
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43d9      	mvns	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004ac:	4313      	orrs	r3, r2
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3724      	adds	r7, #36	; 0x24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_RCC_HSI_IsReady+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000516:	4313      	orrs	r3, r2
 8000518:	600b      	str	r3, [r1, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f023 0203 	bic.w	r2, r3, #3
 800053c:	4904      	ldr	r1, [pc, #16]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	604b      	str	r3, [r1, #4]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_RCC_GetSysClkSource+0x18>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000580:	4904      	ldr	r1, [pc, #16]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	604b      	str	r3, [r1, #4]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	604b      	str	r3, [r1, #4]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005d0:	4904      	ldr	r1, [pc, #16]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005fe:	69da      	ldr	r2, [r3, #28]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_FLASH_SetLatency+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f023 0207 	bic.w	r2, r3, #7
 8000658:	4904      	ldr	r1, [pc, #16]	; (800066c <LL_FLASH_SetLatency+0x24>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	600b      	str	r3, [r1, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40022000 	.word	0x40022000

08000670 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_FLASH_GetLatency+0x18>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0307 	and.w	r3, r3, #7
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f043 0201 	orr.w	r2, r3, #1
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f06f 0204 	mvn.w	r2, #4
 80006ba:	611a      	str	r2, [r3, #16]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d101      	bne.n	80006e0 <LL_TIM_IsActiveFlag_CC2+0x18>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f043 0204 	orr.w	r2, r3, #4
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ff80 	bl	8000618 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000718:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800071c:	f7ff ff64 	bl	80005e8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f7ff fe3b 	bl	800039c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000726:	f7ff fe5d 	bl	80003e4 <__NVIC_GetPriorityGrouping>
 800072a:	4603      	mov	r3, r0
 800072c:	2200      	movs	r2, #0
 800072e:	210f      	movs	r1, #15
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fe8f 	bl	8000454 <NVIC_EncodePriority>
 8000736:	4603      	mov	r3, r0
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 30ff 	mov.w	r0, #4294967295
 800073e:	f7ff fe5f 	bl	8000400 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f815 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f7ff fe21 	bl	800038c <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f7ff fddf 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800074e:	f000 feff 	bl	8001550 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000752:	f000 fb6f 	bl	8000e34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableIT_CC2(TIM2);
 8000756:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800075a:	f7ff ffc8 	bl	80006ee <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 800075e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000762:	f7ff ff93 	bl	800068c <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setDutyCycle(50);
 8000766:	2032      	movs	r0, #50	; 0x32
 8000768:	f000 f834 	bl	80007d4 <setDutyCycle>
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x5e>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff67 	bl	8000648 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800077a:	bf00      	nop
 800077c:	f7ff ff78 	bl	8000670 <LL_FLASH_GetLatency>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1fa      	bne.n	800077c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000786:	f7ff fe99 	bl	80004bc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800078a:	bf00      	nop
 800078c:	f7ff fea6 	bl	80004dc <LL_RCC_HSI_IsReady>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d1fa      	bne.n	800078c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000796:	2010      	movs	r0, #16
 8000798:	f7ff feb2 	bl	8000500 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff fee7 	bl	8000570 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fef8 	bl	8000598 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ff09 	bl	80005c0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff febc 	bl	800052c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007b4:	bf00      	nop
 80007b6:	f7ff fecd 	bl	8000554 <LL_RCC_GetSysClkSource>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1fa      	bne.n	80007b6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <SystemClock_Config+0x60>)
 80007c2:	f002 f803 	bl	80027cc <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <SystemClock_Config+0x60>)
 80007c8:	f002 f80e 	bl	80027e8 <LL_SetSystemCoreClock>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	007a1200 	.word	0x007a1200

080007d4 <setDutyCycle>:

/* USER CODE BEGIN 4 */
void setDutyCycle(uint8_t D)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = ((TIM2->ARR) * D) / 100;
 80007de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ee:	4905      	ldr	r1, [pc, #20]	; (8000804 <setDutyCycle+0x30>)
 80007f0:	fba1 1303 	umull	r1, r3, r1, r3
 80007f4:	095b      	lsrs	r3, r3, #5
 80007f6:	6353      	str	r3, [r2, #52]	; 0x34

}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	51eb851f 	.word	0x51eb851f

08000808 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_CC2(TIM2))
 800080c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000810:	f7ff ff5a 	bl	80006c8 <LL_TIM_IsActiveFlag_CC2>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d01f      	beq.n	800085a <TIM2_IRQHandler+0x52>
	{
		if(truepwm<pwm)
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <TIM2_IRQHandler+0x58>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <TIM2_IRQHandler+0x5c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	da04      	bge.n	8000830 <TIM2_IRQHandler+0x28>
		{
			 truepwm = truepwm  + 1;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <TIM2_IRQHandler+0x58>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <TIM2_IRQHandler+0x58>)
 800082e:	6013      	str	r3, [r2, #0]

		}
		if(truepwm>pwm)
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <TIM2_IRQHandler+0x58>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <TIM2_IRQHandler+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	dd04      	ble.n	8000846 <TIM2_IRQHandler+0x3e>
		{
			 truepwm = truepwm  - 1;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <TIM2_IRQHandler+0x58>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <TIM2_IRQHandler+0x58>)
 8000844:	6013      	str	r3, [r2, #0]
		}
		setDutyCycle(truepwm);
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <TIM2_IRQHandler+0x58>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffc1 	bl	80007d4 <setDutyCycle>

		LL_TIM_ClearFlag_CC2(TIM2);
 8000852:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000856:	f7ff ff29 	bl	80006ac <LL_TIM_ClearFlag_CC2>

	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000024 	.word	0x20000024
 8000864:	20000020 	.word	0x20000020

08000868 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <LL_DMA_DisableChannel+0x3c>)
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	3a01      	subs	r2, #1
 8000886:	4907      	ldr	r1, [pc, #28]	; (80008a4 <LL_DMA_DisableChannel+0x3c>)
 8000888:	5c8a      	ldrb	r2, [r1, r2]
 800088a:	4611      	mov	r1, r2
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	440a      	add	r2, r1
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	08002878 	.word	0x08002878

080008a8 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80008bc:	bf0c      	ite	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	2300      	movne	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008e4:	bf0c      	ite	eq
 80008e6:	2301      	moveq	r3, #1
 80008e8:	2300      	movne	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800092e:	605a      	str	r2, [r3, #4]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800094a:	605a      	str	r2, [r3, #4]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000966:	605a      	str	r2, [r3, #4]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	f003 0310 	and.w	r3, r3, #16
 8000984:	2b10      	cmp	r3, #16
 8000986:	d101      	bne.n	800098c <LL_USART_IsActiveFlag_IDLE+0x18>
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <LL_USART_IsActiveFlag_IDLE+0x1a>
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	2b40      	cmp	r3, #64	; 0x40
 80009ac:	d101      	bne.n	80009b2 <LL_USART_IsActiveFlag_TC+0x18>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <LL_USART_IsActiveFlag_TC+0x1a>
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2210      	movs	r2, #16
 80009cc:	621a      	str	r2, [r3, #32]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009de:	e7fe      	b.n	80009de <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <HardFault_Handler+0x4>

080009e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <BusFault_Handler+0x4>

080009f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <DMA1_Channel6_IRQHandler+0x38>)
 8000a36:	f7ff ff37 	bl	80008a8 <LL_DMA_IsActiveFlag_TC6>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d105      	bne.n	8000a4c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000a40:	f000 fe32 	bl	80016a8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <DMA1_Channel6_IRQHandler+0x38>)
 8000a46:	f7ff ff6b 	bl	8000920 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a4a:	e00a      	b.n	8000a62 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <DMA1_Channel6_IRQHandler+0x38>)
 8000a4e:	f7ff ff53 	bl	80008f8 <LL_DMA_IsActiveFlag_HT6>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d104      	bne.n	8000a62 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000a58:	f000 fe26 	bl	80016a8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <DMA1_Channel6_IRQHandler+0x38>)
 8000a5e:	f7ff ff7b 	bl	8000958 <LL_DMA_ClearFlag_HT6>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <DMA1_Channel7_IRQHandler+0x30>)
 8000a72:	f7ff ff2d 	bl	80008d0 <LL_DMA_IsActiveFlag_TC7>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10d      	bne.n	8000a98 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <DMA1_Channel7_IRQHandler+0x30>)
 8000a7e:	f7ff ff5d 	bl	800093c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000a82:	bf00      	nop
 8000a84:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <DMA1_Channel7_IRQHandler+0x34>)
 8000a86:	f7ff ff88 	bl	800099a <LL_USART_IsActiveFlag_TC>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f9      	beq.n	8000a84 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000a90:	2107      	movs	r1, #7
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Channel7_IRQHandler+0x30>)
 8000a94:	f7ff fee8 	bl	8000868 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <USART2_IRQHandler+0x20>)
 8000aaa:	f7ff ff63 	bl	8000974 <LL_USART_IsActiveFlag_IDLE>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000ab4:	f000 fdf8 	bl	80016a8 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART2_IRQHandler+0x20>)
 8000aba:	f7ff ff81 	bl	80009c0 <LL_USART_ClearFlag_IDLE>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <LL_AHB1_GRP1_EnableClock>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LL_APB1_GRP1_EnableClock>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <LL_TIM_DisableARRPreload>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_TIM_OC_DisableFast>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d028      	beq.n	8000ce2 <LL_TIM_OC_DisableFast+0x62>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d023      	beq.n	8000cde <LL_TIM_OC_DisableFast+0x5e>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b10      	cmp	r3, #16
 8000c9a:	d01e      	beq.n	8000cda <LL_TIM_OC_DisableFast+0x5a>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b40      	cmp	r3, #64	; 0x40
 8000ca0:	d019      	beq.n	8000cd6 <LL_TIM_OC_DisableFast+0x56>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca8:	d013      	beq.n	8000cd2 <LL_TIM_OC_DisableFast+0x52>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb0:	d00d      	beq.n	8000cce <LL_TIM_OC_DisableFast+0x4e>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cb8:	d007      	beq.n	8000cca <LL_TIM_OC_DisableFast+0x4a>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d101      	bne.n	8000cc6 <LL_TIM_OC_DisableFast+0x46>
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	e00e      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	e00c      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cca:	2306      	movs	r3, #6
 8000ccc:	e00a      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cce:	2305      	movs	r3, #5
 8000cd0:	e008      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	e006      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e004      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e002      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <LL_TIM_OC_DisableFast+0x64>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3318      	adds	r3, #24
 8000cea:	4619      	mov	r1, r3
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LL_TIM_OC_DisableFast+0x9c>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	4908      	ldr	r1, [pc, #32]	; (8000d20 <LL_TIM_OC_DisableFast+0xa0>)
 8000cfe:	5ccb      	ldrb	r3, [r1, r3]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2304      	movs	r3, #4
 8000d04:	408b      	lsls	r3, r1
 8000d06:	43db      	mvns	r3, r3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	601a      	str	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	08002898 	.word	0x08002898
 8000d20:	080028a4 	.word	0x080028a4

08000d24 <LL_TIM_OC_EnablePreload>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d028      	beq.n	8000d86 <LL_TIM_OC_EnablePreload+0x62>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d023      	beq.n	8000d82 <LL_TIM_OC_EnablePreload+0x5e>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b10      	cmp	r3, #16
 8000d3e:	d01e      	beq.n	8000d7e <LL_TIM_OC_EnablePreload+0x5a>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b40      	cmp	r3, #64	; 0x40
 8000d44:	d019      	beq.n	8000d7a <LL_TIM_OC_EnablePreload+0x56>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4c:	d013      	beq.n	8000d76 <LL_TIM_OC_EnablePreload+0x52>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d54:	d00d      	beq.n	8000d72 <LL_TIM_OC_EnablePreload+0x4e>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d5c:	d007      	beq.n	8000d6e <LL_TIM_OC_EnablePreload+0x4a>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d64:	d101      	bne.n	8000d6a <LL_TIM_OC_EnablePreload+0x46>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e00e      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	e00c      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e00a      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d72:	2305      	movs	r3, #5
 8000d74:	e008      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e006      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e004      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <LL_TIM_OC_EnablePreload+0x64>
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3318      	adds	r3, #24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LL_TIM_OC_EnablePreload+0x98>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	440b      	add	r3, r1
 8000d98:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <LL_TIM_OC_EnablePreload+0x9c>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2308      	movs	r3, #8
 8000da8:	408b      	lsls	r3, r1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	08002898 	.word	0x08002898
 8000dc0:	080028a4 	.word	0x080028a4

08000dc4 <LL_TIM_SetClockSource>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000dd6:	f023 0307 	bic.w	r3, r3, #7
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	609a      	str	r2, [r3, #8]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <LL_TIM_SetTriggerOutput>:
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	605a      	str	r2, [r3, #4]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_TIM_DisableMasterSlaveMode>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fcfc 	bl	8002850 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fee1 	bl	8000c30 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e6e:	f7ff fe3d 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe8d 	bl	8000b98 <NVIC_EncodePriority>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4619      	mov	r1, r3
 8000e82:	201c      	movs	r0, #28
 8000e84:	f7ff fe5e 	bl	8000b44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e88:	201c      	movs	r0, #28
 8000e8a:	f7ff fe3d 	bl	8000b08 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000e8e:	f240 331f 	movw	r3, #799	; 0x31f
 8000e92:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e94:	2300      	movs	r3, #0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000e98:	2363      	movs	r3, #99	; 0x63
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ea0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eaa:	f001 f82f 	bl	8001f0c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eb2:	f7ff fed5 	bl	8000c60 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ebc:	f7ff ff82 	bl	8000dc4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec6:	f7ff ff2d 	bl	8000d24 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	; 0x60
 8000ecc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eea:	f001 f881 	bl	8001ff0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ef4:	f7ff fec4 	bl	8000c80 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	461a      	mov	r2, r3
 8000f02:	2110      	movs	r1, #16
 8000f04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f08:	f001 f872 	bl	8001ff0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f12:	f7ff feb5 	bl	8000c80 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f16:	2100      	movs	r1, #0
 8000f18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f1c:	f7ff ff67 	bl	8000dee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f24:	f7ff ff76 	bl	8000e14 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f2c:	f7ff fe68 	bl	8000c00 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f30:	2320      	movs	r3, #32
 8000f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f000 fd34 	bl	80019bc <LL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	; 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <__NVIC_GetPriorityGrouping>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <LL_DMA_EnableChannel>:
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LL_DMA_EnableChannel+0x3c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	3a01      	subs	r2, #1
 800108e:	4907      	ldr	r1, [pc, #28]	; (80010ac <LL_DMA_EnableChannel+0x3c>)
 8001090:	5c8a      	ldrb	r2, [r1, r2]
 8001092:	4611      	mov	r1, r2
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	440a      	add	r2, r1
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6013      	str	r3, [r2, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	080028b0 	.word	0x080028b0

080010b0 <LL_DMA_DisableChannel>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LL_DMA_DisableChannel+0x3c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	4907      	ldr	r1, [pc, #28]	; (80010ec <LL_DMA_DisableChannel+0x3c>)
 80010d0:	5c8a      	ldrb	r2, [r1, r2]
 80010d2:	4611      	mov	r1, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	440a      	add	r2, r1
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	080028b0 	.word	0x080028b0

080010f0 <LL_DMA_SetDataTransferDirection>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LL_DMA_SetDataTransferDirection+0x48>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001110:	f023 0310 	bic.w	r3, r3, #16
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	3a01      	subs	r2, #1
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_DMA_SetDataTransferDirection+0x48>)
 800111a:	5c8a      	ldrb	r2, [r1, r2]
 800111c:	4611      	mov	r1, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	440a      	add	r2, r1
 8001122:	4611      	mov	r1, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	080028b0 	.word	0x080028b0

0800113c <LL_DMA_GetDataTransferDirection>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <LL_DMA_GetDataTransferDirection+0x2c>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f244 0310 	movw	r3, #16400	; 0x4010
 800115a:	4013      	ands	r3, r2
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	080028b0 	.word	0x080028b0

0800116c <LL_DMA_SetMode>:
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <LL_DMA_SetMode+0x44>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 0220 	bic.w	r2, r3, #32
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <LL_DMA_SetMode+0x44>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	4619      	mov	r1, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	440b      	add	r3, r1
 800119a:	4619      	mov	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	080028b0 	.word	0x080028b0

080011b4 <LL_DMA_SetPeriphIncMode>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	4619      	mov	r1, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	440b      	add	r3, r1
 80011e2:	4619      	mov	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	080028b0 	.word	0x080028b0

080011fc <LL_DMA_SetMemoryIncMode>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3b01      	subs	r3, #1
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <LL_DMA_SetMemoryIncMode+0x44>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	461a      	mov	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3b01      	subs	r3, #1
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <LL_DMA_SetMemoryIncMode+0x44>)
 8001222:	5ccb      	ldrb	r3, [r1, r3]
 8001224:	4619      	mov	r1, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	080028b0 	.word	0x080028b0

08001244 <LL_DMA_SetPeriphSize>:
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3b01      	subs	r3, #1
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <LL_DMA_SetPeriphSize+0x44>)
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	461a      	mov	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3b01      	subs	r3, #1
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <LL_DMA_SetPeriphSize+0x44>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	4619      	mov	r1, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	440b      	add	r3, r1
 8001272:	4619      	mov	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	080028b0 	.word	0x080028b0

0800128c <LL_DMA_SetMemorySize>:
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <LL_DMA_SetMemorySize+0x44>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <LL_DMA_SetMemorySize+0x44>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	4619      	mov	r1, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	440b      	add	r3, r1
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	080028b0 	.word	0x080028b0

080012d4 <LL_DMA_SetChannelPriorityLevel>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	4619      	mov	r1, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	440b      	add	r3, r1
 8001302:	4619      	mov	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	080028b0 	.word	0x080028b0

0800131c <LL_DMA_SetDataLength>:
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <LL_DMA_SetDataLength+0x44>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	3a01      	subs	r2, #1
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <LL_DMA_SetDataLength+0x44>)
 8001342:	5c8a      	ldrb	r2, [r1, r2]
 8001344:	4611      	mov	r1, r2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	440a      	add	r2, r1
 800134a:	4611      	mov	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	080028b0 	.word	0x080028b0

08001364 <LL_DMA_GetDataLength>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <LL_DMA_GetDataLength+0x28>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	b29b      	uxth	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	080028b0 	.word	0x080028b0

08001390 <LL_DMA_ConfigAddresses>:
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d114      	bne.n	80013ce <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4a16      	ldr	r2, [pc, #88]	; (8001404 <LL_DMA_ConfigAddresses+0x74>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <LL_DMA_ConfigAddresses+0x74>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6093      	str	r3, [r2, #8]
}
 80013cc:	e013      	b.n	80013f6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <LL_DMA_ConfigAddresses+0x74>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <LL_DMA_ConfigAddresses+0x74>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	60d3      	str	r3, [r2, #12]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	080028b0 	.word	0x080028b0

08001408 <LL_DMA_IsActiveFlag_TC6>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_AHB1_GRP1_EnableClock>:
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4313      	orrs	r3, r2
 8001442:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4013      	ands	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000

08001460 <LL_APB1_GRP1_EnableClock>:
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <LL_APB1_GRP1_EnableClock+0x2c>)
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <LL_APB1_GRP1_EnableClock+0x2c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001476:	69da      	ldr	r2, [r3, #28]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4013      	ands	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000

08001490 <LL_USART_Enable>:
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_USART_ConfigAsyncMode>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3308      	adds	r3, #8
 80014e8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	e853 3f00 	ldrex	r3, [r3]
 80014f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3308      	adds	r3, #8
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	61ba      	str	r2, [r7, #24]
 8001502:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	e841 2300 	strex	r3, r2, [r1]
 800150c:	613b      	str	r3, [r7, #16]
   return(result);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e7      	bne.n	80014e4 <LL_USART_DisableIT_CTS+0x8>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3328      	adds	r3, #40	; 0x28
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e002      	b.n	8001540 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3324      	adds	r3, #36	; 0x24
 800153e:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08e      	sub	sp, #56	; 0x38
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800157a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800157e:	f7ff ff6f 	bl	8001460 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001582:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001586:	f7ff ff53 	bl	8001430 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800158a:	230c      	movs	r3, #12
 800158c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800158e:	2302      	movs	r3, #2
 8001590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800159e:	2307      	movs	r3, #7
 80015a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f000 fa07 	bl	80019bc <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2106      	movs	r1, #6
 80015b2:	483b      	ldr	r0, [pc, #236]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015b4:	f7ff fd9c 	bl	80010f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2106      	movs	r1, #6
 80015bc:	4838      	ldr	r0, [pc, #224]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015be:	f7ff fe89 	bl	80012d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2106      	movs	r1, #6
 80015c6:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015c8:	f7ff fdd0 	bl	800116c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2106      	movs	r1, #6
 80015d0:	4833      	ldr	r0, [pc, #204]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015d2:	f7ff fdef 	bl	80011b4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	2106      	movs	r1, #6
 80015da:	4831      	ldr	r0, [pc, #196]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015dc:	f7ff fe0e 	bl	80011fc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2106      	movs	r1, #6
 80015e4:	482e      	ldr	r0, [pc, #184]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015e6:	f7ff fe2d 	bl	8001244 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2106      	movs	r1, #6
 80015ee:	482c      	ldr	r0, [pc, #176]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015f0:	f7ff fe4c 	bl	800128c <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80015f4:	2210      	movs	r2, #16
 80015f6:	2107      	movs	r1, #7
 80015f8:	4829      	ldr	r0, [pc, #164]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 80015fa:	f7ff fd79 	bl	80010f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 80015fe:	2200      	movs	r2, #0
 8001600:	2107      	movs	r1, #7
 8001602:	4827      	ldr	r0, [pc, #156]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 8001604:	f7ff fe66 	bl	80012d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001608:	2200      	movs	r2, #0
 800160a:	2107      	movs	r1, #7
 800160c:	4824      	ldr	r0, [pc, #144]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 800160e:	f7ff fdad 	bl	800116c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001612:	2200      	movs	r2, #0
 8001614:	2107      	movs	r1, #7
 8001616:	4822      	ldr	r0, [pc, #136]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 8001618:	f7ff fdcc 	bl	80011b4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	2107      	movs	r1, #7
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 8001622:	f7ff fdeb 	bl	80011fc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001626:	2200      	movs	r2, #0
 8001628:	2107      	movs	r1, #7
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 800162c:	f7ff fe0a 	bl	8001244 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001630:	2200      	movs	r2, #0
 8001632:	2107      	movs	r1, #7
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_USART2_UART_Init+0x150>)
 8001636:	f7ff fe29 	bl	800128c <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800163a:	f7ff fc8f 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 800163e:	4603      	mov	r3, r0
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fcdf 	bl	8001008 <NVIC_EncodePriority>
 800164a:	4603      	mov	r3, r0
 800164c:	4619      	mov	r1, r3
 800164e:	2026      	movs	r0, #38	; 0x26
 8001650:	f7ff fcb0 	bl	8000fb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001654:	2026      	movs	r0, #38	; 0x26
 8001656:	f7ff fc8f 	bl	8000f78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800165a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800165e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800166c:	230c      	movs	r3, #12
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_USART2_UART_Init+0x154>)
 8001680:	f001 f81e 	bl	80026c0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_USART2_UART_Init+0x154>)
 8001686:	f7ff ff29 	bl	80014dc <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_USART2_UART_Init+0x154>)
 800168c:	f7ff ff10 	bl	80014b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_USART2_UART_Init+0x154>)
 8001692:	f7ff fefd 	bl	8001490 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3738      	adds	r7, #56	; 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40004400 	.word	0x40004400

080016a8 <USART2_CheckDmaReception>:
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
}
void USART2_CheckDmaReception(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <USART2_CheckDmaReception+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d046      	beq.n	8001744 <USART2_CheckDmaReception+0x9c>


		for(int i=old_pos; i<(DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6)); i++){
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <USART2_CheckDmaReception+0xa8>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	e00e      	b.n	80016dc <USART2_CheckDmaReception+0x34>

		USART2_ProcessData(bufferUSART2dma[i]);
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <USART2_CheckDmaReception+0xa4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4924      	ldr	r1, [pc, #144]	; (8001754 <USART2_CheckDmaReception+0xac>)
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	440a      	add	r2, r1
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4610      	mov	r0, r2
 80016cc:	4798      	blx	r3
		old_pos=i;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <USART2_CheckDmaReception+0xa8>)
 80016d4:	801a      	strh	r2, [r3, #0]
		for(int i=old_pos; i<(DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6)); i++){
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	2106      	movs	r1, #6
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 80016e0:	f7ff fe40 	bl	8001364 <LL_DMA_GetDataLength>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8e6      	bhi.n	80016be <USART2_CheckDmaReception+0x16>

		}

		if(LL_DMA_IsActiveFlag_TC6(DMA1)) {
 80016f0:	4819      	ldr	r0, [pc, #100]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 80016f2:	f7ff fe89 	bl	8001408 <LL_DMA_IsActiveFlag_TC6>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d024      	beq.n	8001746 <USART2_CheckDmaReception+0x9e>
		    old_pos = 0;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <USART2_CheckDmaReception+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	801a      	strh	r2, [r3, #0]

			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001702:	2106      	movs	r1, #6
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 8001706:	f7ff fcd3 	bl	80010b0 <LL_DMA_DisableChannel>

			LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800170a:	2101      	movs	r1, #1
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <USART2_CheckDmaReception+0xb4>)
 800170e:	f7ff ff08 	bl	8001522 <LL_USART_DMA_GetRegAddr>
 8001712:	4604      	mov	r4, r0
 8001714:	4d0f      	ldr	r5, [pc, #60]	; (8001754 <USART2_CheckDmaReception+0xac>)
 8001716:	2106      	movs	r1, #6
 8001718:	480f      	ldr	r0, [pc, #60]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 800171a:	f7ff fd0f 	bl	800113c <LL_DMA_GetDataTransferDirection>
 800171e:	4603      	mov	r3, r0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	462b      	mov	r3, r5
 8001724:	4622      	mov	r2, r4
 8001726:	2106      	movs	r1, #6
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 800172a:	f7ff fe31 	bl	8001390 <LL_DMA_ConfigAddresses>
		    LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),	(uint32_t)bufferUSART2dma,LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
		    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800172e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001732:	2106      	movs	r1, #6
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 8001736:	f7ff fdf1 	bl	800131c <LL_DMA_SetDataLength>
		    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800173a:	2106      	movs	r1, #6
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <USART2_CheckDmaReception+0xb0>)
 800173e:	f7ff fc97 	bl	8001070 <LL_DMA_EnableChannel>
 8001742:	e000      	b.n	8001746 <USART2_CheckDmaReception+0x9e>
	if(USART2_ProcessData == 0) return;
 8001744:	bf00      	nop

		}


}
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bdb0      	pop	{r4, r5, r7, pc}
 800174c:	20000028 	.word	0x20000028
 8001750:	2000002c 	.word	0x2000002c
 8001754:	20000030 	.word	0x20000030
 8001758:	40020000 	.word	0x40020000
 800175c:	40004400 	.word	0x40004400

08001760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0b      	ldr	r4, [pc, #44]	; (80017ac <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800178a:	f7ff f99d 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f001 f83b 	bl	8002808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001792:	f7fe ffbc 	bl	800070e <main>

08001796 <LoopForever>:

LoopForever:
    b LoopForever
 8001796:	e7fe      	b.n	8001796 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001798:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017a4:	080028c0 	.word	0x080028c0
  ldr r2, =_sbss
 80017a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017ac:	20000130 	.word	0x20000130

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>

080017b2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b089      	sub	sp, #36	; 0x24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	613b      	str	r3, [r7, #16]
  return result;
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	401a      	ands	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	61bb      	str	r3, [r7, #24]
  return result;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	43db      	mvns	r3, r3
 8001824:	401a      	ands	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	613b      	str	r3, [r7, #16]
  return result;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2103      	movs	r1, #3
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	61bb      	str	r3, [r7, #24]
  return result;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800189e:	b480      	push	{r7}
 80018a0:	b089      	sub	sp, #36	; 0x24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	613b      	str	r3, [r7, #16]
  return result;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2103      	movs	r1, #3
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	401a      	ands	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	61bb      	str	r3, [r7, #24]
  return result;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	60da      	str	r2, [r3, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3724      	adds	r7, #36	; 0x24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	613b      	str	r3, [r7, #16]
  return result;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	210f      	movs	r1, #15
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	61bb      	str	r3, [r7, #24]
  return result;
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800194e:	bf00      	nop
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800195a:	b480      	push	{r7}
 800195c:	b089      	sub	sp, #36	; 0x24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	613b      	str	r3, [r7, #16]
  return result;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	210f      	movs	r1, #15
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	61bb      	str	r3, [r7, #24]
  return result;
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80019b0:	bf00      	nop
 80019b2:	3724      	adds	r7, #36	; 0x24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	613b      	str	r3, [r7, #16]
  return result;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80019de:	e051      	b.n	8001a84 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d043      	beq.n	8001a7e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <LL_GPIO_Init+0x4a>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d10e      	bne.n	8001a24 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff16 	bl	8001840 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fef6 	bl	8001810 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff36 	bl	800189e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d11a      	bne.n	8001a70 <LL_GPIO_Init+0xb4>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	60bb      	str	r3, [r7, #8]
  return result;
 8001a46:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d807      	bhi.n	8001a62 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	461a      	mov	r2, r3
 8001a58:	69b9      	ldr	r1, [r7, #24]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff4e 	bl	80018fc <LL_GPIO_SetAFPin_0_7>
 8001a60:	e006      	b.n	8001a70 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	461a      	mov	r2, r3
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff75 	bl	800195a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	461a      	mov	r2, r3
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fe9a 	bl	80017b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1a6      	bne.n	80019e0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <LL_RCC_HSI_IsReady>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <LL_RCC_HSI_IsReady+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000

08001ac0 <LL_RCC_LSE_IsReady>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LL_RCC_LSE_IsReady+0x20>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <LL_RCC_GetSysClkSource>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <LL_RCC_GetSysClkSource+0x18>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <LL_RCC_GetAHBPrescaler+0x18>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <LL_RCC_GetUSARTClockSource+0x28>)
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b60:	2103      	movs	r1, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	4313      	orrs	r3, r2
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000

08001b80 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <LL_RCC_PLL_GetPrediv+0x18>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f003 030f 	and.w	r3, r3, #15
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bdc:	f000 f864 	bl	8001ca8 <RCC_GetSystemClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f882 	bl	8001cf4 <RCC_GetHCLKClockFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f890 	bl	8001d20 <RCC_GetPCLK1ClockFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f89c 	bl	8001d48 <RCC_GetPCLK2ClockFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60da      	str	r2, [r3, #12]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d12d      	bne.n	8001c8e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff8e 	bl	8001b54 <LL_RCC_GetUSARTClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d00a      	beq.n	8001c54 <LL_RCC_GetUSARTClockFreq+0x34>
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d819      	bhi.n	8001c76 <LL_RCC_GetUSARTClockFreq+0x56>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <LL_RCC_GetUSARTClockFreq+0x2c>
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d00c      	beq.n	8001c64 <LL_RCC_GetUSARTClockFreq+0x44>
 8001c4a:	e014      	b.n	8001c76 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c4c:	f000 f82c 	bl	8001ca8 <RCC_GetSystemClockFreq>
 8001c50:	60f8      	str	r0, [r7, #12]
        break;
 8001c52:	e021      	b.n	8001c98 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001c54:	f7ff ff22 	bl	8001a9c <LL_RCC_HSI_IsReady>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001c60:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c62:	e016      	b.n	8001c92 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001c64:	f7ff ff2c 	bl	8001ac0 <LL_RCC_LSE_IsReady>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c72:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c74:	e00f      	b.n	8001c96 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c76:	f000 f817 	bl	8001ca8 <RCC_GetSystemClockFreq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f839 	bl	8001cf4 <RCC_GetHCLKClockFreq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f84b 	bl	8001d20 <RCC_GetPCLK1ClockFreq>
 8001c8a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001c8c:	e004      	b.n	8001c98 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001c8e:	bf00      	nop
 8001c90:	e002      	b.n	8001c98 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001c96:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001cb2:	f7ff ff17 	bl	8001ae4 <LL_RCC_GetSysClkSource>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d00c      	beq.n	8001cd6 <RCC_GetSystemClockFreq+0x2e>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d80e      	bhi.n	8001cde <RCC_GetSystemClockFreq+0x36>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <RCC_GetSystemClockFreq+0x22>
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d003      	beq.n	8001cd0 <RCC_GetSystemClockFreq+0x28>
 8001cc8:	e009      	b.n	8001cde <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <RCC_GetSystemClockFreq+0x48>)
 8001ccc:	607b      	str	r3, [r7, #4]
      break;
 8001cce:	e009      	b.n	8001ce4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <RCC_GetSystemClockFreq+0x48>)
 8001cd2:	607b      	str	r3, [r7, #4]
      break;
 8001cd4:	e006      	b.n	8001ce4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001cd6:	f000 f84b 	bl	8001d70 <RCC_PLL_GetFreqDomain_SYS>
 8001cda:	6078      	str	r0, [r7, #4]
      break;
 8001cdc:	e002      	b.n	8001ce4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <RCC_GetSystemClockFreq+0x48>)
 8001ce0:	607b      	str	r3, [r7, #4]
      break;
 8001ce2:	bf00      	nop
  }

  return frequency;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	007a1200 	.word	0x007a1200

08001cf4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001cfc:	f7ff ff00 	bl	8001b00 <LL_RCC_GetAHBPrescaler>
 8001d00:	4603      	mov	r3, r0
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <RCC_GetHCLKClockFreq+0x28>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	40d3      	lsrs	r3, r2
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08002880 	.word	0x08002880

08001d20 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d28:	f7ff fef8 	bl	8001b1c <LL_RCC_GetAPB1Prescaler>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <RCC_GetPCLK1ClockFreq+0x24>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	40d3      	lsrs	r3, r2
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08002890 	.word	0x08002890

08001d48 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d50:	f7ff fef2 	bl	8001b38 <LL_RCC_GetAPB2Prescaler>
 8001d54:	4603      	mov	r3, r0
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <RCC_GetPCLK2ClockFreq+0x24>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	40d3      	lsrs	r3, r2
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08002890 	.word	0x08002890

08001d70 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d7e:	f7ff feff 	bl	8001b80 <LL_RCC_PLL_GetMainSource>
 8001d82:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d003      	beq.n	8001d9a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001d92:	e005      	b.n	8001da0 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d96:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001d98:	e005      	b.n	8001da6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001d9c:	60fb      	str	r3, [r7, #12]
      break;
 8001d9e:	e002      	b.n	8001da6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001da2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001da4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001da6:	f7ff ff07 	bl	8001bb8 <LL_RCC_PLL_GetPrediv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	3301      	adds	r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	fbb2 f4f3 	udiv	r4, r2, r3
 8001db4:	f7ff fef2 	bl	8001b9c <LL_RCC_PLL_GetMultiplicator>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dbe:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dc2:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	603a      	str	r2, [r7, #0]
  return result;
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	40d3      	lsrs	r3, r2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	003d0900 	.word	0x003d0900
 8001de8:	007a1200 	.word	0x007a1200

08001dec <LL_TIM_SetPrescaler>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_TIM_SetAutoReload>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_TIM_SetRepetitionCounter>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_TIM_OC_SetCompareCH1>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_TIM_OC_SetCompareCH2>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_TIM_OC_SetCompareCH3>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_TIM_OC_SetCompareCH4>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_TIM_OC_SetCompareCH5>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_TIM_OC_SetCompareCH6>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	615a      	str	r2, [r3, #20]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <LL_TIM_Init+0xd0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <LL_TIM_Init+0x28>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d003      	beq.n	8001f34 <LL_TIM_Init+0x28>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <LL_TIM_Init+0xd4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d106      	bne.n	8001f42 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <LL_TIM_Init+0xd0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <LL_TIM_Init+0x66>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d00f      	beq.n	8001f72 <LL_TIM_Init+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <LL_TIM_Init+0xd4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <LL_TIM_Init+0x66>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <LL_TIM_Init+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <LL_TIM_Init+0x66>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <LL_TIM_Init+0xdc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d003      	beq.n	8001f72 <LL_TIM_Init+0x66>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <LL_TIM_Init+0xe0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d106      	bne.n	8001f80 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff3b 	bl	8001e08 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff27 	bl	8001dec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LL_TIM_Init+0xd0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <LL_TIM_Init+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <LL_TIM_Init+0xd8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <LL_TIM_Init+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <LL_TIM_Init+0xdc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <LL_TIM_Init+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <LL_TIM_Init+0xe0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d105      	bne.n	8001fca <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff2d 	bl	8001e24 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff8e 	bl	8001eec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002006:	d045      	beq.n	8002094 <LL_TIM_OC_Init+0xa4>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800200e:	d848      	bhi.n	80020a2 <LL_TIM_OC_Init+0xb2>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d036      	beq.n	8002086 <LL_TIM_OC_Init+0x96>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201e:	d840      	bhi.n	80020a2 <LL_TIM_OC_Init+0xb2>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002026:	d027      	beq.n	8002078 <LL_TIM_OC_Init+0x88>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202e:	d838      	bhi.n	80020a2 <LL_TIM_OC_Init+0xb2>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	d018      	beq.n	800206a <LL_TIM_OC_Init+0x7a>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d830      	bhi.n	80020a2 <LL_TIM_OC_Init+0xb2>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d003      	beq.n	800204e <LL_TIM_OC_Init+0x5e>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b10      	cmp	r3, #16
 800204a:	d007      	beq.n	800205c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800204c:	e029      	b.n	80020a2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f82d 	bl	80020b0 <OC1Config>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
      break;
 800205a:	e023      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f8a0 	bl	80021a4 <OC2Config>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]
      break;
 8002068:	e01c      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f917 	bl	80022a0 <OC3Config>
 8002072:	4603      	mov	r3, r0
 8002074:	75fb      	strb	r3, [r7, #23]
      break;
 8002076:	e015      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f98e 	bl	800239c <OC4Config>
 8002080:	4603      	mov	r3, r0
 8002082:	75fb      	strb	r3, [r7, #23]
      break;
 8002084:	e00e      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f9ed 	bl	8002468 <OC5Config>
 800208e:	4603      	mov	r3, r0
 8002090:	75fb      	strb	r3, [r7, #23]
      break;
 8002092:	e007      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fa44 	bl	8002524 <OC6Config>
 800209c:	4603      	mov	r3, r0
 800209e:	75fb      	strb	r3, [r7, #23]
      break;
 80020a0:	e000      	b.n	80020a4 <LL_TIM_OC_Init+0xb4>
      break;
 80020a2:	bf00      	nop
  }

  return result;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0201 	bic.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f023 0202 	bic.w	r2, r3, #2
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f023 0201 	bic.w	r2, r3, #1
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <OC1Config+0xe4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00b      	beq.n	800212e <OC1Config+0x7e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <OC1Config+0xe8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <OC1Config+0x7e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <OC1Config+0xec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <OC1Config+0x7e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <OC1Config+0xf0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d11e      	bne.n	800216c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f023 0208 	bic.w	r2, r3, #8
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f023 0204 	bic.w	r2, r3, #4
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fe5e 	bl	8001e40 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40014000 	.word	0x40014000
 800219c:	40014400 	.word	0x40014400
 80021a0:	40014800 	.word	0x40014800

080021a4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0210 	bic.w	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	0212      	lsls	r2, r2, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0220 	bic.w	r2, r3, #32
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0210 	bic.w	r2, r3, #16
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <OC2Config+0xec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00b      	beq.n	8002228 <OC2Config+0x84>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a20      	ldr	r2, [pc, #128]	; (8002294 <OC2Config+0xf0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <OC2Config+0x84>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <OC2Config+0xf4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d003      	beq.n	8002228 <OC2Config+0x84>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <OC2Config+0xf8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d11f      	bne.n	8002268 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	019b      	lsls	r3, r3, #6
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fdee 	bl	8001e5c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800

080022a0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <OC3Config+0xec>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00b      	beq.n	8002322 <OC3Config+0x82>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <OC3Config+0xf0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <OC3Config+0x82>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <OC3Config+0xf4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <OC3Config+0x82>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <OC3Config+0xf8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d11f      	bne.n	8002362 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	015b      	lsls	r3, r3, #5
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fd7f 	bl	8001e78 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800

0800239c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	0212      	lsls	r2, r2, #8
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	031b      	lsls	r3, r3, #12
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	031b      	lsls	r3, r3, #12
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <OC4Config+0xbc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <OC4Config+0x84>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <OC4Config+0xc0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <OC4Config+0x84>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <OC4Config+0xc4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <OC4Config+0x84>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <OC4Config+0xc8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d107      	bne.n	8002430 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fd26 	bl	8001e94 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800

08002468 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <OC5Config+0xac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00b      	beq.n	80024dc <OC5Config+0x74>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a14      	ldr	r2, [pc, #80]	; (8002518 <OC5Config+0xb0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <OC5Config+0x74>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <OC5Config+0xb4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d003      	beq.n	80024dc <OC5Config+0x74>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <OC5Config+0xb8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d109      	bne.n	80024f0 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fcd7 	bl	8001eb0 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800

08002524 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	0212      	lsls	r2, r2, #8
 8002556:	4313      	orrs	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <OC6Config+0xac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00b      	beq.n	800259a <OC6Config+0x76>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <OC6Config+0xb0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <OC6Config+0x76>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <OC6Config+0xb4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d003      	beq.n	800259a <OC6Config+0x76>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <OC6Config+0xb8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d109      	bne.n	80025ae <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fc88 	bl	8001ed0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800

080025e0 <LL_USART_IsEnabled>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <LL_USART_IsEnabled+0x18>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_USART_IsEnabled+0x1a>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_USART_SetStopBitsLength>:
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_USART_SetHWFlowCtrl>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_USART_SetBaudRate>:
{
 8002652:	b480      	push	{r7}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002666:	d11a      	bne.n	800269e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	005a      	lsls	r2, r3, #1
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	441a      	add	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	60da      	str	r2, [r3, #12]
}
 800269c:	e00a      	b.n	80026b4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	085a      	lsrs	r2, r3, #1
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	441a      	add	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff84 	bl	80025e0 <LL_USART_IsEnabled>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d14e      	bne.n	800277c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <LL_USART_Init+0xc8>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	6851      	ldr	r1, [r2, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	4311      	orrs	r1, r2
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	6912      	ldr	r2, [r2, #16]
 80026f4:	4311      	orrs	r1, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6992      	ldr	r2, [r2, #24]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff7c 	bl	8002606 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff89 	bl	800262c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <LL_USART_Init+0xcc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d104      	bne.n	800272c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002722:	2000      	movs	r0, #0
 8002724:	f7ff fa7c 	bl	8001c20 <LL_RCC_GetUSARTClockFreq>
 8002728:	61b8      	str	r0, [r7, #24]
 800272a:	e016      	b.n	800275a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <LL_USART_Init+0xd0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d107      	bne.n	8002744 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fa4b 	bl	8001bd4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e00a      	b.n	800275a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <LL_USART_Init+0xd4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d106      	bne.n	800275a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fa3f 	bl	8001bd4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002768:	2300      	movs	r3, #0
 800276a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69b9      	ldr	r1, [r7, #24]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff6b 	bl	8002652 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800277c:	7ffb      	ldrb	r3, [r7, #31]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	efff69f3 	.word	0xefff69f3
 800278c:	40013800 	.word	0x40013800
 8002790:	40004400 	.word	0x40004400
 8002794:	40004800 	.word	0x40004800

08002798 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <LL_InitTick+0x30>)
 80027ac:	3b01      	subs	r3, #1
 80027ae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_InitTick+0x30>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <LL_InitTick+0x30>)
 80027b8:	2205      	movs	r2, #5
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e010 	.word	0xe000e010

080027cc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ffdd 	bl	8002798 <LL_InitTick>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <LL_SetSystemCoreClock+0x1c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000000 	.word	0x20000000

08002808 <__libc_init_array>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	4d0d      	ldr	r5, [pc, #52]	; (8002840 <__libc_init_array+0x38>)
 800280c:	4c0d      	ldr	r4, [pc, #52]	; (8002844 <__libc_init_array+0x3c>)
 800280e:	1b64      	subs	r4, r4, r5
 8002810:	10a4      	asrs	r4, r4, #2
 8002812:	2600      	movs	r6, #0
 8002814:	42a6      	cmp	r6, r4
 8002816:	d109      	bne.n	800282c <__libc_init_array+0x24>
 8002818:	4d0b      	ldr	r5, [pc, #44]	; (8002848 <__libc_init_array+0x40>)
 800281a:	4c0c      	ldr	r4, [pc, #48]	; (800284c <__libc_init_array+0x44>)
 800281c:	f000 f820 	bl	8002860 <_init>
 8002820:	1b64      	subs	r4, r4, r5
 8002822:	10a4      	asrs	r4, r4, #2
 8002824:	2600      	movs	r6, #0
 8002826:	42a6      	cmp	r6, r4
 8002828:	d105      	bne.n	8002836 <__libc_init_array+0x2e>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002830:	4798      	blx	r3
 8002832:	3601      	adds	r6, #1
 8002834:	e7ee      	b.n	8002814 <__libc_init_array+0xc>
 8002836:	f855 3b04 	ldr.w	r3, [r5], #4
 800283a:	4798      	blx	r3
 800283c:	3601      	adds	r6, #1
 800283e:	e7f2      	b.n	8002826 <__libc_init_array+0x1e>
 8002840:	080028b8 	.word	0x080028b8
 8002844:	080028b8 	.word	0x080028b8
 8002848:	080028b8 	.word	0x080028b8
 800284c:	080028bc 	.word	0x080028bc

08002850 <memset>:
 8002850:	4402      	add	r2, r0
 8002852:	4603      	mov	r3, r0
 8002854:	4293      	cmp	r3, r2
 8002856:	d100      	bne.n	800285a <memset+0xa>
 8002858:	4770      	bx	lr
 800285a:	f803 1b01 	strb.w	r1, [r3], #1
 800285e:	e7f9      	b.n	8002854 <memset+0x4>

08002860 <_init>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr

0800286c <_fini>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr
